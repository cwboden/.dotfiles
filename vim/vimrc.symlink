set nocompatible
execute pathogen#infect()

filetype plugin indent on

" Language and Encoding {{{
set encoding=utf-8

let $LANG='en'
set langmenu=en
" }}}

" General Configuration {{{
set showcmd
set laststatus=2
set noshowmode
set autoread

set ruler
set number
set relativenumber
set cursorline

set nowrap

set history=500

set so=8

set wildmenu
set wildmode=list:longest,list:full

set ttimeoutlen=10

set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
  set wildignore+=.git\*,.hg\*,.svn\*
else
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif
" }}}

" Swap Files and Backups {{{
set autowrite

set directory=$HOME/.vim/swapfiles//
set backupdir=$HOME/.vim/backups//
" }}}

" Centralized swap files and undo directory {{{
set directory^=$HOME/.vim/swapfiles//

set undodir=~/.vim/undodir
set undofile
" }}}

" Appearance {{{
syntax on
syntax enable

set background=dark
colorscheme gruvbox

set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»
" }}}

" Indentation {{{
set tabstop=2
set shiftwidth=2
set softtabstop=2

set expandtab
set smarttab
set autoindent
set shiftround
filetype plugin indent on

set backspace=eol,start,indent

set modelines=1
" }}}

" Folding {{{
set foldmethod=indent
set foldnestmax=10
set foldenable
set foldlevelstart=10
" }}}

" Noises and Notifications {{{
set noerrorbells
set novisualbell
" }}}

" Searching {{{
set ignorecase
set smartcase

set showmatch
set hlsearch
set incsearch
" }}}

" Windows and Tabs {{{
set hidden
set splitbelow
set splitright
" }}}

" Keybindings {{{
let mapleader = " "
let maplocalleader = " "

nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

nnoremap j gj
nnoremap k gk

nmap <silent> // :nohlsearch<CR>

noremap <leader>m : silent make\|redraw!\|cw<CR>

command! Bd bp | sp | bn | bd

inoremap <S-Tab> <C-V><Tab>
" }}}

" Airline {{{
let g:airline_powerline_fonts=1
let g:airline_inactive_collapse=1
let g:airline_theme="gruvbox"
" }}}

" NERD Tree {{{
let NerdTreeMinimalUI = 1
let NERDTreeIgnore = ['\.pyc$', '\.o$', '\.pdf$']
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeDirArrows = 1

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

map <C-n> : NERDTreeToggle<CR>
map <Leader>nf : NERDTreeFind<CR>
" }}}

" NERD Commenter {{{
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
" }}}

" YouCompleteMe {{{
let g:ycm_server_python_interpreter = '/usr/bin/python3'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
" }}}

" C++ Enhanced Highlight {{{
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
" }}}

" Asynchronous Linter (ALE) {{{
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:airline#extensions#ale#enabled = 1
let g:ale_completion_enabled = 1
let g:ale_linters = {'cpp': ['g++']}
let g:ale_c_parse_makefile = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-d> :ALEGoToDefinition
" }}}

" vim:foldmethod=marker:foldlevel=0
