---
name: Submission Tests

on:
    pull_request:
        branches: [main]

concurrency:
    group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
    cancel-in-progress: true

jobs:
    detect-changes:
        runs-on: ubuntu-latest
        outputs:
            bootstrap: ${{ steps.filter.outputs.bootstrap }}
            python: ${{ steps.filter.outputs.python }}
            rust: ${{ steps.filter.outputs.rust }}
            website: ${{ steps.filter.outputs.website }}
        steps:
            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      # Run Workflow for all suites if the script has changed
                      workflows:
                        - '.github/workflows/submission-tests.yml'
                      bootstrap:
                        - 'Cargo.lock'
                        - 'Cargo.toml'
                        - 'bootstrap/**'
                        - 'dependencies.txt'
                        - 'poetry.lock'
                        - 'pyproject.toml'
                      python:
                        - '*.py'
                      rust:
                        - '*.rs'
                      website:
                        - 'docs/**'

    bootstrap:
        needs: detect-changes
        if: >-
            needs.detect-changes.outputs.bootstrap == 'true' ||
            needs.detect-changes.outputs.workflows == 'true'
        runs-on: ubuntu-latest
        steps:
            # Checks out repository under $GITHUB_WORKSPACE
            - uses: actions/checkout@v3

            - uses: actions/setup-python@v4
              with:
                  python-version: 3.x

            - uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Configure $PYTHONPATH and venv
              run: |
                  echo "PYTHONPATH=$PYTHONPATH:~/.dotfiles" >> $GITHUB_ENV
                  source .venv/bin/activate

            - name: Generate `poetry.lock` files
              run: |
                  for dir in $(find $GITHUB_WORKSPACE -name pyproject.toml | xargs dirname); do
                    cd $dir
                    poetry lock --no-interaction
                  done

            - name: Load cached Python venv
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            - name: Install Python dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: |
                  cd bootstrap
                  poetry install --no-interaction --no-root

            - name: Check pre-commit cache
              uses: actions/cache@v3
              with:
                  path: ~/.cache/pre-commit
                  key: ${{ runner.os }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}

            - name: Run Bootstrap
              run: |
                  cd bootstrap
                  poetry run python main.py

            - name: See if Bootstrap worked
              run: |
                  cd bootstrap
                  poetry run python -m unittest 'main_integration_test.py'

    python:
        needs: detect-changes
        if: >-
            needs.detect-changes.outputs.python == 'true' ||
            needs.detect-changes.outputs.workflows == 'true'
        runs-on: ubuntu-latest
        steps:
            # Checks out repository under $GITHUB_WORKSPACE
            - uses: actions/checkout@v3

            - name: Install Ubuntu packages
              run: sudo apt install $(cat dependencies.txt)

            - uses: actions/setup-python@v4
              with:
                  python-version: 3.x

            - uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Configure $PYTHONPATH and venv
              run: |
                  echo "PYTHONPATH=$PYTHONPATH:~/.dotfiles" >> $GITHUB_ENV
                  source .venv/bin/activate

            - name: Generate `poetry.lock` files
              run: |
                  for dir in $(find $GITHUB_WORKSPACE -name pyproject.toml | xargs dirname); do
                    cd $dir
                    poetry lock --no-interaction
                  done

            - name: Load cached Python venv
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            - name: Install Python dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: |
                  for dir in $(find $GITHUB_WORKSPACE -name pyproject.toml | xargs dirname); do
                    cd $dir
                    poetry install --no-interaction --no-root
                  done

            - name: Run Python unittests
              run: |
                  for test in $(find $GITHUB_WORKSPACE -name "*_test.py" -not -path "**/bootstrap/**" -not -path "**/.venv/**"); do
                    cd $(dirname $test)
                    poetry run python -m unittest $test
                  done

    rust:
        needs: detect-changes
        if: >-
            needs.detect-changes.outputs.rust == 'true' ||
            needs.detect-changes.outputs.workflows == 'true'
        runs-on: ubuntu-latest
        steps:
            # Checks out repository under $GITHUB_WORKSPACE
            - uses: actions/checkout@v3

            - name: Install Ubuntu packages
              run: sudo apt install $(cat dependencies.txt)

            - name: Check Cargo cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Run Rust core tests
              run: cargo test

            - name: Run Rust example tests
              run: cargo test --examples

            - name: Run Rust doc tests
              run: cargo test --doc

    website:
        needs: detect-changes
        if: >-
            needs.detect-changes.outputs.website == 'true' ||
            needs.detect-changes.outputs.workflows == 'true'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./docs
        steps:
            - uses: actions/checkout@v2

            - name: Set up Ruby
              uses: ruby/setup-ruby@359bebbc29cbe6c87da6bc9ea3bc930432750108
              with:
                  working-directory: ./docs
                  ruby-version: '3.1'
                  bundler-cache: true

            - name: Ensure Site builds correctly
              run: |
                  bundle exec jekyll build
                  bundle exec htmlproofer ./_site --disable-external --allow-hash-href
