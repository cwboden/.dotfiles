<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://carsonboden.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://carsonboden.com/" rel="alternate" type="text/html" /><updated>2023-10-06T09:15:51-07:00</updated><id>https://carsonboden.com/feed.xml</id><title type="html">Carson Boden</title><subtitle>My personal portfolio / blog</subtitle><author><name>Carson Boden</name></author><entry><title type="html">Using the ***Facade*** Pattern to Split Tightly-Coupled Services</title><link href="https://carsonboden.com/programming/2023/08/30/facade-pattern.html" rel="alternate" type="text/html" title="Using the ***Facade*** Pattern to Split Tightly-Coupled Services" /><published>2023-08-30T00:00:00-07:00</published><updated>2023-08-29T18:02:43-07:00</updated><id>https://carsonboden.com/programming/2023/08/30/facade-pattern</id><content type="html" xml:base="https://carsonboden.com/programming/2023/08/30/facade-pattern.html">&lt;p&gt;As services grow, there are often tendencies to expand existing API surfaces,
rather than breaking contexts apart. This results in more tightly-coupled
services which should be broken apart as the bloated system matures into more
distinct layers.&lt;/p&gt;

&lt;h2 id=&quot;taking-advantage-of-facades&quot;&gt;Taking Advantage of &lt;strong&gt;&lt;em&gt;Facades&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Let’s take, for example, a persisted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; entity which contains a
myriad of information, though most users only require a small section, like the
contact information for the manager or the shop’s hours.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;This makes changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; class or its associated components
&lt;em&gt;(like the Provider)&lt;/em&gt; expensive, since it forces downstream users to use the
latest definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt;, even if the data they care about is
unchanged.&lt;/p&gt;

&lt;p&gt;This diagram demonstrates some possible “sub-types” of data that are currently
part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; but should be split out:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart LR
    SP{{StoreProvider}}
    SS&amp;gt;StoreSummary]

    SP --&amp;gt; SS

    SS -.-&amp;gt; SC
    SS -.-&amp;gt; ST
    SS -.-&amp;gt; SH
    SS -.-&amp;gt; SN

    SC&amp;gt;StoreContact]
    SH&amp;gt;StoreHours]
    ST&amp;gt;StoreTags]
    SN&amp;gt;StoreNotes]

&lt;/div&gt;

&lt;p&gt;Solving this problem can feel difficult at first, since it seems like we’d need
a sweeping change to split-out and convert all users of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; to
instead use their sub-type. Plus, how can we make these changes mechanical to
maintain parity before and after the split?&lt;/p&gt;

&lt;p class=&quot;notice--success&quot;&gt;This is where the &lt;strong&gt;&lt;em&gt;Facade Pattern&lt;/em&gt;&lt;/strong&gt; helps us out. By inserting a layer
between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreProvider&lt;/code&gt; and its users, we can restrict the API surface as needed
so that callers can work with only the necessary data.&lt;/p&gt;

&lt;p&gt;We do this by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Identifying the sub-types of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; based on its use-cases elsewhere in
the code. &lt;em&gt;(This can also be done iteratively, breaking off small chunks as
needed.)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Inserting a &lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt; Provider between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreProvider&lt;/code&gt; and any sub-types.&lt;/li&gt;
  &lt;li&gt;Converting users of the top-level Provider to use the sub-type-specific
&lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Extracting the &lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt; Provider logic out of the top-level Provider; now
it can live as a standalone service!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;first-iteration&quot;&gt;First Iteration&lt;/h3&gt;
&lt;p&gt;Now let’s look at an example. Below, we’ve introduced a &lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt; for three
of our sub-types. The &lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt; Providers can each call into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreProvider&lt;/code&gt;
to fetch the data they need, but then only expose the sub-type to callers.&lt;/p&gt;

&lt;p&gt;Any user of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreContact&lt;/code&gt;, for example, is now explicitly using that sub-type,
rather than fetching a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; and then fishing for the data it needs.&lt;/p&gt;

&lt;p class=&quot;notice--success&quot;&gt;This has the added benefit of reducing test setup, since we don’t need an
&lt;em&gt;entire&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; to validate our system’s behavior.&lt;/p&gt;

&lt;p&gt;We can also see that these chunks can be done iteratively. For example, users of
any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreNotes&lt;/code&gt; data still currently rely on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; directly:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart LR
    SP{{StoreProvider}}

    SP &amp;lt;-.-&amp;gt; SCP
    SP &amp;lt;-.-&amp;gt; STP
    SP &amp;lt;-.-&amp;gt; SHP

    subgraph facade
        direction LR
        SCP{{StoreContactProvider}}
        STP{{StoreTagsProvider}}
        SHP{{StoreHoursProvider}}
    end

    SC&amp;gt;StoreContact]
    SCP --&amp;gt; SC

    ST&amp;gt;StoreTags]
    STP --&amp;gt; ST

    SH&amp;gt;StoreHours]
    SHP --&amp;gt; SH

    SS&amp;gt;StoreSummary]
    SP --&amp;gt; SS

    SN&amp;gt;StoreNotes]
    SS -.-&amp;gt; SN

&lt;/div&gt;

&lt;h3 id=&quot;second-iteration&quot;&gt;Second Iteration&lt;/h3&gt;
&lt;p&gt;In the next snapshot of our development process, described by the following
diagram, we have since created a &lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreNotes&lt;/code&gt; as well as
extracted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreContact&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TagsProviders&lt;/code&gt; out into their own service.&lt;/p&gt;

&lt;p&gt;By this point of development, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreProvider&lt;/code&gt; and the associated
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; type are completely enveloped by the &lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt;. Modifications
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreSummary&lt;/code&gt; are less invasive, as we only need to update their usage in
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreNotes&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HoursProviders&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, the two extracted Providers now own their data and can start
following best practices, like consuming their own database. By using the
&lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt;, it’s easier to stradle the in-between state without breaking any
existing users.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart LR
    SP{{StoreProvider}}

    SP &amp;lt;-.-&amp;gt; SHP
    SP &amp;lt;-.-&amp;gt; SNP

    subgraph facade
        direction LR
        SHP{{StoreHoursProvider}}
        SNP{{StoreNotesProvider}}
    end

    SCP{{StoreContactProvider}}
    SC&amp;gt;StoreContact]
    SCP ---&amp;gt; SC

    STP{{StoreTagsProvider}}
    ST&amp;gt;StoreTags]
    STP ---&amp;gt; ST

    SH&amp;gt;StoreHours]
    SHP --&amp;gt; SH

    SN&amp;gt;StoreNotes]
    SNP --&amp;gt; SN

&lt;/div&gt;

&lt;h2 id=&quot;leveraging-kotlin-delegation&quot;&gt;Leveraging Kotlin Delegation&lt;/h2&gt;

&lt;p&gt;Finally, while it’s often best practice to split these services apart, it can
also often be necessary to maintain the existing, tightly-coupled endpoints that
are used by legacy systems.&lt;/p&gt;

&lt;p&gt;Thankfully, Kotlin’s delegation pattern can make this a breeze by allowing us to
extend the old top-level Provider class by delegating to our newly-extracted
Providers. Let’s use our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreProvider&lt;/code&gt; as an example once more:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IStoreHoursProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStoreHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoreId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoreHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ## OLD IMPLEMENTATION ##&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoreProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IStoreHoursProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStoreHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoreId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoreHours&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// pseudo-implementation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbAccessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masterConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;useWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;FluentStatement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromSql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SOME_ACCESS_STATEMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;useWith&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toStoreHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ## NEW IMPLEMENTATION ##&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoreProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;storeHoursProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoreHoursProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IStoreHoursProvider&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeHoursProvider&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// exposes getStoreHours()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreProvider&lt;/code&gt; uses the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreHoursProvider&lt;/code&gt; as its delegate to
implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IStoreHoursProvider&lt;/code&gt;. Legacy calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreProvider&lt;/code&gt; will continue
to function, calling through to the sub-service, though any users that only need
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreStatus&lt;/code&gt; can be migrated to depend directly on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StoreHoursProvider&lt;/code&gt;
instead.&lt;/p&gt;

&lt;div class=&quot;notice--success&quot;&gt;
  
&lt;p&gt;To sum things up, the &lt;strong&gt;&lt;em&gt;Facade&lt;/em&gt;&lt;/strong&gt; Pattern is helpful for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Splitting large, tightly-coupled services into smaller chunks incrementally.&lt;/li&gt;
  &lt;li&gt;Easily maintaining backwards compatibility with existing callers.&lt;/li&gt;
  &lt;li&gt;Shoring up Providers to take advantage of modern best practices.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</content><author><name>Carson Boden</name></author><category term="Programming" /><category term="api" /><category term="architecture" /><category term="design-patterns" /><category term="facade" /><summary type="html">Incrementally transition a monolithic service into multiple, smaller chunks.</summary></entry><entry><title type="html">Exploring the *Souls*-like Genre via *Death’s Door* and *TUNIC*</title><link href="https://carsonboden.com/video%20games/2023/05/07/comparing-deaths-door-and-tunic.html" rel="alternate" type="text/html" title="Exploring the *Souls*-like Genre via *Death’s Door* and *TUNIC*" /><published>2023-05-07T00:00:00-07:00</published><updated>2023-06-13T04:31:15-07:00</updated><id>https://carsonboden.com/video%20games/2023/05/07/comparing-deaths-door-and-tunic</id><content type="html" xml:base="https://carsonboden.com/video%20games/2023/05/07/comparing-deaths-door-and-tunic.html">&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/deaths-door-and-tunic-splash.jpg&quot; alt=&quot;The splash art for both Death's Door and TUNIC.&quot; /&gt;&lt;/figure&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;em&gt;&lt;strong&gt;Death’s Door&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;&lt;strong&gt;TUNIC&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;20 Jul 2021 &lt;em&gt;(PC)&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;16 Mar 2022 &lt;em&gt;(PC)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Acid Nerve&lt;/td&gt;
      &lt;td&gt;Isometricorp Games&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Devolver Digital&lt;/td&gt;
      &lt;td&gt;Finji&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;I recently finished playing &lt;em&gt;TUNIC&lt;/em&gt;, which reminded me a lot of &lt;em&gt;Death’s Door&lt;/em&gt;,
a game which I enjoyed but otherwise forgot about until considering how similar
it is to &lt;em&gt;TUNIC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Both are isometric, &lt;em&gt;Souls&lt;/em&gt;-like, Action-Adventure games starring a cutesy,
animal protagonist. However, despite the similar core gameplay and appearance,
each game varies in its execution.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;This post aims to highlight why &lt;em&gt;TUNIC&lt;/em&gt; stuck with me more than &lt;em&gt;Death’s Door&lt;/em&gt;,
especially given their apparent similarity.&lt;/p&gt;

&lt;h2 id=&quot;what-defines-a-souls-like-game&quot;&gt;What Defines a &lt;em&gt;Souls&lt;/em&gt;-like Game?&lt;/h2&gt;
&lt;p&gt;Since we’ll be discussing how &lt;em&gt;Death’s Door&lt;/em&gt; and &lt;em&gt;TUNIC&lt;/em&gt; each follow this
format, we should clarify what it is. The definition has plenty of room for
interpretation, so for the purposes of this article, I will be using &lt;strong&gt;&lt;em&gt;my&lt;/em&gt;&lt;/strong&gt;
definition of &lt;em&gt;Souls&lt;/em&gt;-like.&lt;/p&gt;

&lt;p&gt;At a high-level, though, a good start might be:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;em&gt;Souls&lt;/em&gt;-like is a subgenre of action role-playing and action-adventure games
known for high levels of difficulty and emphasis on environmental
storytelling.
&lt;br /&gt; – &lt;a href=&quot;https://en.wikipedia.org/wiki/Soulslike&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The origin of the name comes from the &lt;em&gt;Demon’s Souls&lt;/em&gt; and &lt;em&gt;Dark Souls&lt;/em&gt; series by
FromSoftware. For clarity, those &lt;em&gt;specific&lt;/em&gt; games are instead referred to as
&lt;strong&gt;Soulsborne&lt;/strong&gt; games (derived to also include FromSoftware’s critically
acclaimed &lt;em&gt;Bloodborne&lt;/em&gt;).&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;I challenge the notion that high difficulty is a &lt;strong&gt;&lt;em&gt;requirement&lt;/em&gt;&lt;/strong&gt; for
&lt;em&gt;Souls&lt;/em&gt;-like games and will argue that it is instead an expectation from
contemporary gamers.&lt;/p&gt;

&lt;p&gt;I’ll expand on some other common themes that are found in &lt;em&gt;Souls&lt;/em&gt;-like games,
though there’s no official definition.&lt;/p&gt;

&lt;h3 id=&quot;redesigned-rest-points&quot;&gt;Redesigned Rest Points&lt;/h3&gt;
&lt;p&gt;One of the ways that &lt;em&gt;Souls&lt;/em&gt;-like games are so unique (and classifiable) is the
way in which players must heal their character.&lt;/p&gt;

&lt;p&gt;The player is typically restricted from healing or resting except at designated
sites. However, when the player chooses to do so, they will &lt;strong&gt;&lt;em&gt;also&lt;/em&gt;&lt;/strong&gt; heal or
revive all enemies across the entire gameworld.&lt;/p&gt;

&lt;p&gt;The recovery mechanic creates a powerful and exciting tension, since players
can’t kill a few enemies, then just run back to the nearest checkpoint to heal
up. To further compound the effect, &lt;a href=&quot;#methodical-combat-using-stamina&quot;&gt;enemies often take serious investment to
kill&lt;/a&gt;, meaning players must decide if a rest
will be worth fighting through familiar foes again.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;This is also one of the ways that difficulty in &lt;em&gt;Souls&lt;/em&gt;-like have become a
presumption: As genre-experienced gamers grew in experience and more casual
players were pushed out, more difficult enemies were required to continue
fostering the kill-or-be-killed tension of combat.&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;
    &lt;strong&gt;A tangent on using Health to build an experience&lt;/strong&gt;
  &lt;/summary&gt;
  
&lt;p class=&quot;notice--info&quot;&gt;This section isn’t too related to &lt;em&gt;Souls&lt;/em&gt;-likes, &lt;em&gt;Death’s Door&lt;/em&gt;, nor &lt;em&gt;TUNIC&lt;/em&gt;,
but I wanted to publish it anyways, since I think there’s some interesting
takeaways.&lt;/p&gt;

&lt;p&gt;Most games with a notion of “health” or “lives” have a way of using that
resource to incentivize an experience. In a first-person shooter focused on
energy and excitement, for example, a game might use cover-based combat and
a health bar which quickly recovers when hiding.&lt;/p&gt;

&lt;p&gt;These two mechanics together keeps combat snappy, since players need only
take a quick pause and then can jump back into the action. We can see this
done in plenty of AAA titles like &lt;em&gt;Uncharted&lt;/em&gt;, &lt;em&gt;Call of Duty&lt;/em&gt;, and
&lt;em&gt;Battlefield&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But a designer could instead use spacious levels and remove the ability to
recover health, creating a much slower, tense game. Players will want to
surprise their enemies to avoid losing as much health as they can.&lt;/p&gt;

&lt;p&gt;We can see this design used at great success in &lt;em&gt;Counter-Strike&lt;/em&gt; or even
&lt;em&gt;Call of Duty&lt;/em&gt; sub-games like &lt;em&gt;“One in the Chamber”&lt;/em&gt; where players have only
one health and a pistol with a single bullet.&lt;/p&gt;

&lt;p&gt;Here are some other ideas of how health mechanics can be used in some other
genres:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Genre&lt;/th&gt;
      &lt;th&gt;Recovery Mechanic&lt;/th&gt;
      &lt;th&gt;Experience Objective&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Platformer&lt;/td&gt;
      &lt;td&gt;Collect Pickup&lt;/td&gt;
      &lt;td&gt;Introduce tension between challenge of collecting the item and the risk of failing to do so. &lt;em&gt;(e.g. a difficult to reach 1-UP)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fighter&lt;/td&gt;
      &lt;td&gt;Respawn / Lives&lt;/td&gt;
      &lt;td&gt;Incentivize players to fight tooth-and-nail to inflict as much damage before losing a stock. &lt;em&gt;(e.g. 2 KO’s in one life)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rhythm&lt;/td&gt;
      &lt;td&gt;Rebuild Multiplier&lt;/td&gt;
      &lt;td&gt;Encourage mastery of die-hard players while tolerating higher levels of failure from novices. &lt;em&gt;(e.g. scores climb quadratically with skill)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOBA&lt;/td&gt;
      &lt;td&gt;Return to Base&lt;/td&gt;
      &lt;td&gt;Healing is always an option, at the cost of not exerting influence around the map. &lt;em&gt;(e.g. not around to stop your opponent)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;/details&gt;

&lt;h3 id=&quot;methodical-combat-using-stamina&quot;&gt;Methodical Combat using Stamina&lt;/h3&gt;
&lt;p&gt;In order to maximize the impact of limited recovery, enemies in &lt;em&gt;Souls&lt;/em&gt;-like
games require players to carefully overpower them. Attacks from both the player
and enemies are slow and will leave combatants wide open as the animation winds
up and after the attack finishes.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Pattern recognition and patience is key to combat, rather than speed and damage
output seen in hack-and-slash melee fighters. Players must analyze their enemies
to find a moment of vulnerability to get a few hits in before retreating to
safety.&lt;/p&gt;

&lt;p&gt;The heavy usage of a stamina resource adds more difficulty. Players will be
vulnerable or unable to perform specific abilities when out of stamina. But they
also need to use the stamina to be effective in combat via dodge-rolls,
empowered attacks, or by blocking enemies.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/dark-souls-3-first-boss.jpg&quot; alt=&quot;Iudex Gundyr, the first boss of Dark Souls III.&quot; /&gt;&lt;figcaption&gt;
      Iudex Gundyr, the first boss of &lt;em&gt;Dark Souls III&lt;/em&gt;. The player must
        carefully manager their attacks in stamina to defeat the boss. He also
        eclipses the player, giving the appearance and feel of an unfair
        opponent.

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;This all culminates in the frequent and epically intensifying boss battles,
which crank the tension of combat up to eleven. Huge enemies make the player
feel small and outmatched during these fights. And they’re made even more
tense with the resource management of combat.&lt;/p&gt;

&lt;p&gt;The bosses force players to methodically manage their stamina and analyze the
incoming attack patterns in order to strike in between each devastating attack.
All this against the overwhelming odds of some unspeakable horror.&lt;/p&gt;

&lt;h3 id=&quot;common-boss-organization&quot;&gt;Common Boss Organization&lt;/h3&gt;
&lt;p&gt;I postulate that most &lt;em&gt;Souls&lt;/em&gt;-like games follow this (general) approach to
presenting bosses to the player:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart LR
    T(Tutorial)
    T --&amp;gt; 1
    1[First]
    1 --&amp;gt; A
    1 --&amp;gt; B
    1 --&amp;gt; C
    style A fill:#8b0000
    style B fill:#013220
    style C fill:#00008b
    A --&amp;gt; P
    B --&amp;gt; P
    C --&amp;gt; P
    P[Penultimate]
    P --&amp;gt; F
    F{{Final}}

&lt;/div&gt;

&lt;p&gt;Initially, a Tutorial boss is used to demonstrate the boss dimension of
&lt;em&gt;Souls&lt;/em&gt;-like gameplay (and how it differs from other Action-Adventure games).
Players are used to dealing with enemies from earlier in their adventure, but
what changes when fighting a boss?&lt;/p&gt;

&lt;figure class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/tunic-rudeling.png&quot; alt=&quot;A drawing of a Rudeling from Tunic's player manual.&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Often, the tutorial bosses become standard enemies in the remainder of the game,
like with the Rudeling &lt;em&gt;(right)&lt;/em&gt; from &lt;em&gt;TUNIC&lt;/em&gt; or &lt;em&gt;Sekiro&lt;/em&gt;’s Chained Ogre.&lt;/p&gt;

&lt;p&gt;Then, the player continues with the game until they are confronted with their
first “real” boss. This is where the game shows how difficult bosses can be.&lt;/p&gt;

&lt;p&gt;Afterwards, the player has proven themselves worthy enough to enter any part of
the world. From here, most bosses are able to be tackled in any order.&lt;/p&gt;

&lt;p&gt;Once defeating these core bosses, and obtaining the necessary
&lt;a href=&quot;https://en.wikipedia.org/wiki/MacGuffin&quot;&gt;MacGuffins&lt;/a&gt; (e.g. in &lt;em&gt;Death’s Door&lt;/em&gt;
you need three “giant” souls; in &lt;em&gt;TUNIC&lt;/em&gt; you need the three colored hexagons),
the player will typically then present these tokens to fight the “gatekeeper”
boss: a guardian of the last levels of the game, and where the player will
confront the final boss.&lt;/p&gt;

&lt;p&gt;We can see that both &lt;em&gt;Death’s Door&lt;/em&gt; and &lt;em&gt;TUNIC&lt;/em&gt; both follow this pattern via the
&lt;a href=&quot;#deaths-door-bosses&quot;&gt;boss diagrams in the appendix&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;environmental-storytelling&quot;&gt;Environmental Storytelling&lt;/h3&gt;
&lt;p&gt;The mechanics of &lt;em&gt;Souls&lt;/em&gt;-like games are also designed to create a world
unwelcoming to the player. Enemies feel more powerful since players don’t have
many ways to heal. Every hit taken is one fewer they’ll be able to handle as
they press onwards to the next checkpoint.&lt;/p&gt;

&lt;p&gt;Another tension emerges between the player and the world with currency that’s
lost when you die. In the eponymous &lt;em&gt;Dark Souls&lt;/em&gt;, players collect souls which
can be used to upgrade character stats, but are also dropped when defeated. Upon
dying, players must crawl back and re-slay enemies with the hope of reaching
their cache of lost souls.&lt;/p&gt;

&lt;p&gt;And if they die again, then their cache is lost forever. Releasing some of that
tension (since players likely won’t have many souls otherwise at this point) but
also creating a serious setback for the player. Imagine if you lost XP or levels
upon death in an RPG. It’d make the game that much harder.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/hollow-knight-shade.jpg&quot; alt=&quot;A Shade, from Hollow Knight, which must be defeated to recover your
        Geo.&quot; /&gt;&lt;figcaption&gt;
      In Hollow Knight, a Shade spawns when dying, which must be defeated
        to recover all Geo, a valuable currency the player can use to unlock
        additional abilities.

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Games in this genre also typically avoid exposition dumps to the player,
choosing instead to encourage player exploration in the unforgiving world to
find useful trinkets and the lore surrounding it in their search.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Bloodborne&lt;/em&gt;, for example, the player encounters a child, desperately asking
the player to recover her missing mother’s favorite brooch. This piece of
jewelry can later be found on the mutilated corpse, cast aside by the area’s
boss. But the most impressive twist comes when the player discovers the wife’s
name engraved next to the boss’s, indicating a twisted transformation of a once
loving couple.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;None of this, however, is confirmed by the game, but rather an inference the
player makes by connecting pieces of the environment together. Some players may
choose to ignore this dimension of the game entirely, but at the very least,
environmental storytelling lets players explore the game at their own pace.&lt;/p&gt;

&lt;h2 id=&quot;a-re-expression-of-the-genre&quot;&gt;A Re-expression of the Genre&lt;/h2&gt;
&lt;p&gt;We now have some basic ideas for what makes a &lt;em&gt;Souls&lt;/em&gt;-like game. The player has
less health as a resource, and must defeat unforgiving enemies with minimal
damage, as resting will also heal all the enemies!&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Let’s look now at how these two games expand on the genre, exhibiting ways to
tweak the formula as well as attempts that didn’t pan out.&lt;/p&gt;

&lt;h3 id=&quot;a-primer-on-deaths-door&quot;&gt;A Primer on &lt;em&gt;Death’s Door&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;When also considering the developers’ previous work, &lt;a href=&quot;https://en.wikipedia.org/wiki/Titan_Souls&quot;&gt;&lt;em&gt;Titan
Souls&lt;/em&gt;&lt;/a&gt;, it’s clear the designers are
heavily inspired by &lt;em&gt;Souls&lt;/em&gt;-like games, looking to put a new spin on the genre.&lt;/p&gt;

&lt;figure class=&quot;align-center half&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/deaths-door-text.jpg&quot; alt=&quot;A Dark Souls inspired text overlay within Death's Door&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/dark-souls-3-lord-of-cinder.png&quot; alt=&quot;Fishing minigame in Stardew Valley&quot; /&gt;
  &lt;figcaption&gt;
    Even from early in the game, it's clear where &lt;em&gt;Death's Door&lt;/em&gt; gets its
    roots from, using the same dramatic text overlays from &lt;em&gt;Dark Souls&lt;/em&gt;.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The Steam page description of the game is as follows:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Reaping souls of the dead and punching a clock might get monotonous but it’s
honest work for a Crow. The job gets lively when your assigned soul is stolen
and you must track down a desperate thief to a realm untouched by death –
where creatures grow far past their expiry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Compared to other &lt;em&gt;Souls&lt;/em&gt;-likes, as well as &lt;em&gt;TUNIC&lt;/em&gt;, &lt;em&gt;Death’s Door&lt;/em&gt; is much more
narratively driven, using cutscenes and a variety of memorable characters to
push a stronger, first-degree storyline contrasting the slower, environmental
narratives of previous entries.&lt;/p&gt;

&lt;h3 id=&quot;a-primer-on-tunic&quot;&gt;A Primer on &lt;em&gt;TUNIC&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;On the other hand, &lt;em&gt;TUNIC&lt;/em&gt;’s narrative (as well as most of its mechanics) are
rarely shown to the player. Instead, the player must figure things out for
themselves via environmental puzzles sprinkled throughout the world.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/assets/img/tunic-manual-p20.avif&quot;&gt;
    &lt;img src=&quot;/assets/img/tunic-manual-p20.avif&quot; alt=&quot;My optimized path through the level&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    Page 20 of &lt;em&gt;TUNIC&lt;/em&gt;'s in-game manual. Players must parse what they can
    out of the game's strange and unique language.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;TUNIC&lt;/em&gt; is described on Steam as:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Explore a land filled with lost legends, ancient powers, and ferocious
monsters in &lt;em&gt;TUNIC&lt;/em&gt;, an isometric action game about a small fox on a big
adventure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The blurb is quite vague, though given &lt;em&gt;TUNIC&lt;/em&gt;’s more puzzle-y nature, its hard
to dive deep into gameplay without giving too much away.&lt;/p&gt;

&lt;p&gt;Let’s now examine how each game refines the genre and see how the puzzles of
&lt;em&gt;TUNIC&lt;/em&gt; meshed better with a &lt;em&gt;Souls&lt;/em&gt;-like than the overt narrative of &lt;em&gt;Death’s
Door&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;different-takes-on-health&quot;&gt;Different Takes on Health&lt;/h3&gt;
&lt;p&gt;As mentioned above, the healing and stamina resources are key to the
&lt;em&gt;Souls&lt;/em&gt;-like genre, creating an exciting tension between the player and an
unwelcoming world.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TUNIC&lt;/em&gt; follows the formula, giving the player a Magic Potion highly reminiscent
of &lt;em&gt;Dark Souls&lt;/em&gt;’ Estus Flask. Players can drink from the flask to recover
health, though much like attacking or dodging, the lengthy animation can leave
players open for a counterattack if not planned carefully.&lt;/p&gt;

&lt;figure class=&quot;align-center third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/tunic-magic-potion.png&quot; alt=&quot;The Magic Potion from TUNIC.&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/dark-souls-estus-flask.jpg&quot; alt=&quot;The Estus Flask from Dark Souls.&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/zelda-heart-container.png&quot; alt=&quot;A Heart Container from The Legend of Zelda.&quot; /&gt;
  &lt;figcaption&gt;
    The Magic Potion &lt;em&gt;(left)&lt;/em&gt; from &lt;em&gt;TUNIC&lt;/em&gt;, which borrows its
    mechanics from &lt;em&gt;Dark Souls&lt;/em&gt;' Estus Flask &lt;em&gt;(middle)&lt;/em&gt; with a
    touch of stylistic &lt;em&gt;Zelda&lt;/em&gt; flair &lt;em&gt;(right)&lt;/em&gt;.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Like in &lt;em&gt;Dark Souls&lt;/em&gt;, the flask also refills at rest points, giving players a
few extra hits they can take in combat, though it can be risky if enemies are
right in your face.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Death’s Door&lt;/em&gt; takes a different approach, giving players Life Seeds which can
be planted in pots around the map and then consumed to heal to full health. The
plants bloom again anytime the player dies, making them into more of a
checkpoint mechanic.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;This works well with &lt;em&gt;Death’s Door&lt;/em&gt;’s old-school, pip-based health mechanic.
&lt;strong&gt;&lt;em&gt;Any&lt;/em&gt;&lt;/strong&gt; hit in combat deals exactly one damage, forcing the player to be wary
of simple enemies and boss attacks all the same.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;a href=&quot;/assets/img/deaths-door-life-seed.jpg&quot;&gt;
    &lt;img src=&quot;/assets/img/deaths-door-life-seed.jpg&quot; alt=&quot;A planted Life Seed in Death's Door, ready for consumption.&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    A planted Life Seed in &lt;em&gt;Death's Door&lt;/em&gt;, ready for consumption.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The Life Seeds add some player choice to the mix; using all your seeds in one
region will mean you won’t be able to heal as often in another. They also become
a collectible currency, encouraging the player to seek out seeds to improve
their odds.&lt;/p&gt;

&lt;p&gt;Neither of these approaches is strictly &lt;em&gt;better&lt;/em&gt;, though it’s refreshing to see
a new take from &lt;em&gt;Death’s Door&lt;/em&gt;, setting itself apart from other &lt;em&gt;Souls&lt;/em&gt;-likes.&lt;/p&gt;

&lt;h3 id=&quot;difficulty-as-an-aesthetic&quot;&gt;Difficulty as an Aesthetic&lt;/h3&gt;
&lt;p&gt;While &lt;a href=&quot;#what-defines-a-souls-like-game&quot;&gt;Wikipedia’s definition&lt;/a&gt; attributes high
difficulty to &lt;em&gt;Souls&lt;/em&gt;-like games, I believe it’s defined more by the tension
between the player and the world which gives a &lt;em&gt;feeling&lt;/em&gt; of overwhelming odds
while enabling the player to advance onwards, despite their losses.&lt;/p&gt;

&lt;p&gt;Let’s revisit the loss of Souls in &lt;em&gt;Dark Souls&lt;/em&gt;. Yes, it is frustrating as a
player to have your progress set back, but since enemies respawn when resting,
there’s an infinite number of Souls that can be harvested.&lt;/p&gt;

&lt;p&gt;As a result, the player will &lt;em&gt;feel&lt;/em&gt; the pain of death, intensified further by
the loss of some progress, but they can still advance onwards. If a player
wanted to, they could stay in one place, collecting Souls and then resting until
leveling up so that enemies are more tenable.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;I believe this gameplay loop is grindy and not the intended experience of
&lt;em&gt;Souls&lt;/em&gt;-like, but we’ll see how &lt;em&gt;Death’s Door&lt;/em&gt; and &lt;em&gt;TUNIC&lt;/em&gt; have smoothed out
this approach.&lt;/p&gt;

&lt;p&gt;Both of the games we’ve been examining cut this paradigm out; players won’t
lose any resources when dying. But they’re both still able to keep the tension
between the world and player in other ways.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Death’s Door&lt;/em&gt;, for example, doesn’t allow players to recover health within boss
battles, since there are no Life Seed pots. Experienced and novice players alike
will be forced to learn how to read telegraphed attacks, since there’s little
room for error.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/deaths-door-shrine.jpg&quot; alt=&quot;A Shrine from Death's Door&quot; /&gt;&lt;figcaption&gt;
      A Shrine from &lt;em&gt;Death’s Door&lt;/em&gt;, which is one of the few ways
        to gain more health in the game.

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Players &lt;em&gt;can&lt;/em&gt; however, search for Shrines hidden around the world to increase
the amount of hits they can take in a battle. This allows them to press on,
upgrading their character without having to grind for excess Souls.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TUNIC&lt;/em&gt; instead chooses to builds this tension using sparse checkpoints around
the map. Players will still lose progress, since, in many cases, you’ll need to
defeat the same set of enemies again when making your way back into each
section.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Trudging through the Quarry is especially memorable to me, since I was sent all
the way back to the beginning so many times.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/tunic-quarry-map.jpg&quot; alt=&quot;A map of the Quarry region in TUNIC.&quot; /&gt;&lt;figcaption&gt;
      A map of the Quarry region, from &lt;em&gt;TUNIC&lt;/em&gt;, which has only a
        single usable checkpoint location &lt;em&gt;(red arrow)&lt;/em&gt;, even for the
        boss!

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;While players of &lt;em&gt;TUNIC&lt;/em&gt; won’t be able to grind to make combat easier (since
killing enemies doesn’t level you up), they can find a variety of power-ups
hidden throughout the world to increase their stats.&lt;/p&gt;

&lt;p&gt;Both games find ways to keep the feel of difficulty while still providing
alternate avenues to advance. The refined design opens the genre to more casual
players (especially when paired with the cute, isometric artstyle) while
maintaining the core aesthetic of &lt;em&gt;Souls&lt;/em&gt;-like gameplay.&lt;/p&gt;

&lt;h3 id=&quot;approach-to-the-narrative&quot;&gt;Approach to the Narrative&lt;/h3&gt;
&lt;p&gt;Most entries in the &lt;em&gt;Soulsborne&lt;/em&gt; series avoid explicitly explaining exposition
to the player, instead choosing to embed story into the items and dungeon
architecture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Death’s Door&lt;/em&gt; departs from this design, using mostly cutscenes to express the
narrative. Unlike most &lt;em&gt;Souls&lt;/em&gt;-likes, though, the NPCs are whimsical and
charming, making them a fun contrast against the gameplay and black-and-white
overworld the player spawns from.&lt;/p&gt;

&lt;video preload=&quot;&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot; width=&quot;100%&quot;&gt;
  &lt;source src=&quot;/assets/video/deaths-door-pothead.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Above, Pothead gives a delightful introduction to The Ceramic Manor, though also
dumps a fair bit of exposition onto the player, rather than letting them explore
on their own.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;While there are some examples of environmental storytelling using the game’s
collectible &lt;a href=&quot;https://deaths-door-game.fandom.com/wiki/Items&quot;&gt;Shiny Things&lt;/a&gt;,
like the Engagement Ring and Old Photograph found in the Urn Witch’s Manor
(perhaps a failed relationship caused her to become evil?), most items don’t
inspire much thought, like the Corrupted Antler or Rusty Trowel (old, discarded
things, loosely related to their environment).&lt;/p&gt;

&lt;p&gt;As a result, the characters of &lt;em&gt;Death’s Door&lt;/em&gt; are memorable, but the story is
not. It uses the typical Action-Adventure trope of “good protagonist” versus the
“ruler corrupted by power”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TUNIC&lt;/em&gt;, on the other hand, continues to follow the &lt;em&gt;Souls&lt;/em&gt;-like template,
leveraging environmental storytelling to weave a mystery and letting the player
piece together their own interpretation throughout their journey.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;a href=&quot;/assets/img/tunic-old-house.webp&quot;&gt;
    &lt;img src=&quot;/assets/img/tunic-old-house.webp&quot; alt=&quot;The inside of the Old House, from TUNIC.&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;
    The inside of the Old House, from &lt;em&gt;TUNIC&lt;/em&gt;. The unexplained remnants
    of a home leave much to the imagination. The player can fill in the gaps
    with their own thoughts.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For example, the Old House is an important location full of a few puzzles
(which I won’t spoil) and a variety of decorations to which the player gives
their own meaning.&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;My explanation is that the protagonist of &lt;em&gt;TUNIC&lt;/em&gt; grew up in this house before
the land was overrun by monsters. This made sense to me since you can sleep in
the bed and the chest is empty (because you already have what was inside?)&lt;/p&gt;

&lt;p&gt;By coupling puzzles and narrative elements together, the “Aha!” moments are
especially rewarding, since the player both solves a puzzle &lt;em&gt;and&lt;/em&gt; uncovers more
of the enigmatic forces behind the gameworld.&lt;/p&gt;

&lt;p&gt;Although &lt;em&gt;Death’s Door&lt;/em&gt; tries to shake up the genre by altering some of it’s
core gameplay pillars, &lt;em&gt;TUNIC&lt;/em&gt;’s faith to the formula delivers a more memorable
experience. This is largely, too, due to how &lt;em&gt;TUNIC&lt;/em&gt; innovates with &lt;em&gt;new&lt;/em&gt;
mechanics to add to the atmosphere of mystery and exploration.&lt;/p&gt;

&lt;h3 id=&quot;standout-mechanics&quot;&gt;Standout Mechanics&lt;/h3&gt;
&lt;p&gt;Part of what made &lt;em&gt;TUNIC&lt;/em&gt; a more standout title is the ideas it blends with the
&lt;em&gt;Souls&lt;/em&gt;-like genre to create a new experience. To be clear, &lt;em&gt;Death’s Door&lt;/em&gt; is
still a fun, incredibly polished, isometric &lt;em&gt;Souls&lt;/em&gt;-like. But it doesn’t quite
stick with you after completion.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;I had a great time playing &lt;em&gt;Death’s Door&lt;/em&gt;, but it really only came back to mind
after completing &lt;em&gt;TUNIC&lt;/em&gt; and realizing how similar the two games were.&lt;/p&gt;

&lt;p&gt;Aside from the Life Seeds – which we’ve already discussed – &lt;em&gt;Death’s Door&lt;/em&gt;
delivers a more casual take on a &lt;em&gt;Souls&lt;/em&gt;-like without many fresh ideas. Here are
a few small remaining distinguishers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Players can roll without spending stamina, giving them more leeway to play
defensively.&lt;/li&gt;
  &lt;li&gt;Weapons can be upgraded via challenges to unlock powerful new effects.&lt;/li&gt;
  &lt;li&gt;There are lots of silly achievements, like completing the game using the
umbrella as your only weapon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--info&quot;&gt;Both games also have a secret ending &lt;em&gt;(I won’t say more than that!)&lt;/em&gt; but
&lt;em&gt;TUNIC&lt;/em&gt; builds to it more naturally, since players are pushed to explore the
puzzle-centric gameworld, compared to the narrative-focused &lt;em&gt;Death’s Door&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;By contrast, &lt;em&gt;TUNIC&lt;/em&gt; has three dynamite ideas which separate it from other
&lt;em&gt;Souls&lt;/em&gt;-likes, yet mesh seamlessly into the experience, though I can only talk
about two of them without spoiling the game.&lt;/p&gt;

&lt;p&gt;The first, most apparent differentiator is the unique language created for the
game. It makes the world feel unwelcoming, as many &lt;em&gt;Souls&lt;/em&gt;-likes do, but also
mysterious and puzzling.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/tunic-language.avif&quot; alt=&quot;A sign from TUNIC, in a strange and unknown language.&quot; /&gt;&lt;figcaption&gt;
      A sign from &lt;em&gt;TUNIC&lt;/em&gt; in a strange and unknown language.

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the ways I wanted to help players feel like they were in a world that
wasn’t meant for them was to fill the game with a strange, unreadable
language…like you were playing something you shouldn’t.
&lt;br /&gt; – &lt;a href=&quot;https://blog.playstation.com/2022/09/21/the-creation-of-tunics-invaluable-in-game-manual/&quot;&gt;Andrew Shouldice, &lt;em&gt;TUNIC&lt;/em&gt;’s lead developer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second innovation is the in-game manual, referenced previously. It’s truly
a culmination of both the core mechanics of &lt;em&gt;Souls&lt;/em&gt;-likes and the focus on
puzzle-solving unique to &lt;em&gt;TUNIC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each page of the manual is a collectible to find within the gameworld, offering
environmental storytelling (via beautiful illustrations and sparse English
text), a guide for the player (like instructions for moves you could always
use, but never knew how), and puzzles (which often don’t make sense initially,
but reveal themselves later).&lt;/p&gt;

&lt;p&gt;Players will pore over each manual page trying to find anything that might help
them on their adventure. And these clues can often be extremely subtle, giving
that “Aha!” moment, regardless of if someone is looking for an answer to a
puzzle or decrypting the lore.&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;As for the third, perhaps this post may inspire you to play for yourself and
find out! I think you’ll be rewarded for your effort.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Design choices made by &lt;em&gt;TUNIC&lt;/em&gt; tend to mesh better with the &lt;em&gt;Souls&lt;/em&gt;-like genre.
The puzzles pair well with the mystery and environmental storytelling, which is
great way of intensifying the player’s natural desire to explore the gameworld.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Death’s Door&lt;/em&gt;’s heavy-handed narrative drives the game forward, but
is ultimately forgettable. Despite taking larger steps away from the
&lt;em&gt;Souls&lt;/em&gt;-like genre, it fails to innovate in those areas, instead borrowing
tropes from other games.&lt;/p&gt;

&lt;p&gt;While both games are polished and enjoyable, I hold &lt;em&gt;TUNIC&lt;/em&gt; in higher esteem
and would recommend it over &lt;em&gt;Death’s Door&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That being said, if you enjoyed one, you’ll likely enjoy the other! I look
forward to the next entry from either studio and how they’ll refine the
&lt;em&gt;Souls&lt;/em&gt;-like formula next.&lt;/p&gt;

&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;
&lt;p&gt;Below are some diagrams referenced above. They are a bit too large to squeeze
into a paragraph and can interrupt the reader.&lt;/p&gt;

&lt;h3 id=&quot;deaths-door-bosses&quot;&gt;&lt;em&gt;Death’s Door&lt;/em&gt; Bosses&lt;/h3&gt;
&lt;p&gt;Below is a layout of the levels and bosses encountered within &lt;em&gt;Death’s Door&lt;/em&gt;. It
follows, to a T, &lt;a href=&quot;#common-boss-organization&quot;&gt;the layout described above&lt;/a&gt;.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart TD
    T(Grove of Spirits&lt;br /&gt;&lt;em&gt;&lt;strong&gt;DEMONIC FOREST SPIRIT&lt;/strong&gt;&lt;/em&gt;)
    T --&amp;gt; 1
    1[Lost Cemetery&lt;br /&gt;&lt;em&gt;&lt;strong&gt;GUARDIAN OF THE DOOR&lt;/strong&gt;&lt;/em&gt;]
    1 --&amp;gt; A
    1 --&amp;gt; B
    1 --&amp;gt; C
    A[Ceramic Manor&lt;br /&gt;Inner Furnace&lt;br /&gt;&lt;em&gt;&lt;strong&gt;THE URN WITCH&lt;/strong&gt;&lt;/em&gt;]
    style A fill:#8b0000
    B[Mushroom Dungeon&lt;br /&gt;Flooded Fortress&lt;br /&gt;&lt;em&gt;&lt;strong&gt;THE FROG KING&lt;/strong&gt;&lt;/em&gt;]
    style B fill:#013220
    C[Castle Lockstone&lt;br /&gt;Old Watchtowers&lt;br /&gt;&lt;em&gt;&lt;strong&gt;BETTY&lt;/strong&gt;&lt;/em&gt;]
    style C fill:#00008b
    A --&amp;gt; P
    B --&amp;gt; P
    C --&amp;gt; P
    P[Lost Cemetery&lt;br /&gt;&lt;em&gt;&lt;strong&gt;THE GREY CROW&lt;/strong&gt;&lt;/em&gt;]
    P --&amp;gt; F
    F{{Hall of Doors&lt;br /&gt;&lt;em&gt;&lt;strong&gt;THE LORD OF DOORS&lt;/strong&gt;&lt;/em&gt;}}

&lt;/div&gt;

&lt;h3 id=&quot;tunic-bosses&quot;&gt;&lt;em&gt;TUNIC&lt;/em&gt; Bosses&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;TUNIC&lt;/em&gt; layout is also similar, though there’s an extra set of levels
squeezed in between the guardian and final boss.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart TD
    T(East Belltower&lt;br /&gt;&lt;em&gt;&lt;strong&gt;GUARD CAPTAIN&lt;/strong&gt;&lt;/em&gt;)
    T --&amp;gt; 1
    1[West Belltower&lt;br /&gt;&lt;em&gt;&lt;strong&gt;GARDEN KNIGHT&lt;/strong&gt;&lt;/em&gt;]
    1 --&amp;gt; A
    1 --&amp;gt; B
    1 --&amp;gt; C
    A[East Forest&lt;br /&gt;Eastern Vault&lt;br /&gt;&lt;em&gt;&lt;strong&gt;SEIGE ENGINE&lt;/strong&gt;&lt;/em&gt;]
    style A fill:#8b0000
    B[Ruined Atoll&lt;br /&gt;Frog's Domain&lt;br /&gt;Grand Library&lt;br /&gt;&lt;em&gt;&lt;strong&gt;THE LIBRARIAN&lt;/strong&gt;&lt;/em&gt;]
    style B fill:#013220
    C[Quarry&lt;br /&gt;Monastery&lt;br /&gt;Rooted Ziggurat&lt;br /&gt;&lt;em&gt;&lt;strong&gt;BOSS OF THE SCAVENGERS&lt;/strong&gt;&lt;/em&gt;]
    style C fill:#00008b
    A --&amp;gt; P
    B --&amp;gt; P
    C --&amp;gt; P
    P[Oubliette&lt;br /&gt;&lt;em&gt;&lt;strong&gt;THE HEIR&lt;/strong&gt;&lt;/em&gt;]
    P --&amp;gt; I
    I[Swamp&lt;br /&gt;Cathedral&lt;br /&gt;Hero's Grave]
    P -.-&amp;gt; F
    I --&amp;gt; F
    F{{&quot;Oubliette&lt;br /&gt;&lt;strong&gt;&lt;em&gt;THE HEIR&lt;/em&gt; (again)&lt;/strong&gt;&quot;}}

&lt;/div&gt;</content><author><name>Carson Boden</name></author><category term="Video Games" /><category term="souls-like" /><category term="story" /><category term="puzzle" /><summary type="html">Comparing the small differences in experience, art, and design which can add up to drastically different games in the same genre.</summary></entry><entry><title type="html">A Deep Dive into API Design and Auto-Generation</title><link href="https://carsonboden.com/programming/2023/05/03/api-design.html" rel="alternate" type="text/html" title="A Deep Dive into API Design and Auto-Generation" /><published>2023-05-03T00:00:00-07:00</published><updated>2023-05-05T18:02:43-07:00</updated><id>https://carsonboden.com/programming/2023/05/03/api-design</id><content type="html" xml:base="https://carsonboden.com/programming/2023/05/03/api-design.html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;An Application Programming Interface (API) is a set of rules that enable
different applications to communicate with one another. They often expose a list
of operations and associated types that callers can use to interact with a
system.&lt;/p&gt;

&lt;p&gt;This is much like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; pattern in most programming languages. For
example, imagine this simple API for placing online orders (which we’ll expand
on later):&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;item_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// The API contract for which users can interact with orders&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// Aligns with a POST request to our servers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;placeOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;// Aligns with a DELETE request to our servers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancelOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any users of our service can write a client which implements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderApi&lt;/code&gt; to
interact with and place orders. Although my snippet above is in Rust, there’s
rarely explicit language limits for APIs.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Most APIs are designed in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful
way&lt;/a&gt;, where
clients send requests to a specific URL and receive a response from the server,
indicating the status of their request.
&lt;br /&gt;&lt;br /&gt;
For example, the well-known 404 response indicates that a resource, page, or
endpoint was not found.&lt;/p&gt;

&lt;p&gt;On the backend, our server will also implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderApi&lt;/code&gt; so that we can process
incoming requests from any user’s client.&lt;/p&gt;

&lt;p&gt;Because this contract is used externally, our server must &lt;strong&gt;&lt;em&gt;always&lt;/em&gt;&lt;/strong&gt; uphold
the API contract so that anyone who did the work implementing an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderApi&lt;/code&gt;
client can continue to call into our service.&lt;/p&gt;

&lt;h3 id=&quot;why-its-important&quot;&gt;Why it’s Important&lt;/h3&gt;
&lt;p&gt;API design is so important because – for external-facing code – we must always
uphold the contract, otherwise we’ll &lt;strong&gt;&lt;em&gt;break&lt;/em&gt;&lt;/strong&gt; all existing users!&lt;/p&gt;

&lt;p&gt;To consider things from the other perspective, imagine trying to stand up an
application using a library that is &lt;strong&gt;&lt;em&gt;constantly changing!&lt;/em&gt;&lt;/strong&gt; It’d be
frustrating having to frequently update your code when the functionality you
want is largely the same.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For code internal to a single module, we can update both the library and callers
at once, meaning we don’t have to think about breaking API changes as much.
&lt;br /&gt;&lt;br /&gt;
This is especially true for monorepos, since callers and providers live in one
place.&lt;/p&gt;

&lt;p&gt;As software architecture has largely moved towards microservices (and thus,
multirepos), caution around API changes has expanded to cover internal APIs,
too, since code is deployed in more individual units.&lt;/p&gt;

&lt;p&gt;For example, consider the differences in these two architectures:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single Deployment:&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    M(fooService&lt;br /&gt;barService&lt;br /&gt;fooBarService)
    NM(newFooService&lt;br /&gt;newBarService&lt;br /&gt;newFooBarService)
    M -..-&amp;gt; NM
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Service-Oriented:&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    subgraph V0[my-foo-bar-service]
        F(fooService)
        B(barService)
        FB(fooBarService)
        FB ---&amp;gt; B
        FB ---&amp;gt; F
    end
    subgraph V1[a single service upgrades]
        NF1(fooService)
        NB1(newBarService)
        NFB1(fooBarService)
        NFB1 ---&amp;gt; NB1
        NFB1 ---&amp;gt; NF1
    end
    subgraph V2[two services upgrade]
        NF2(newFooService)
        NB2(barService)
        NFB2(newFooBarService)
        NFB2 ---&amp;gt; NB2
        NFB2 ---&amp;gt; NF2
    end
    subgraph V3[all services upgrade]
        NF3(newFooService)
        NB3(newBarService)
        NFB3(newFooBarService)
        NFB3 ---&amp;gt; NB3
        NFB3 ---&amp;gt; NF3
    end
    V0 -..-&amp;gt; V1
    V0 -..-&amp;gt; V2
    V0 -..-&amp;gt; V3
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Each of the rounded boxes represents an individually deployed module and how its
dependencies might change when upgrading. We can see that the fleet of smaller
deployments has more “state” it must support.&lt;/p&gt;

&lt;p&gt;Much of contemporary web architecture has been moving towards making deployment
units smaller, which can reduce downtime and improve efficiency, especially at
scale. But we can also see how this architecture has drawbacks without good
version management.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;If we assume that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fooBarService&lt;/code&gt; calls into both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fooService&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barService&lt;/code&gt;,
we can better understand how multirepos must respect API contracts more closely.&lt;/p&gt;

&lt;p&gt;In the single deployment approach, since we change all of the services
&lt;em&gt;together&lt;/em&gt;, we can make bigger changes, because we know each service will always
be in alignment. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fooService&lt;/code&gt; changes, we know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fooBarService&lt;/code&gt; will also
change with it.&lt;/p&gt;

&lt;p&gt;By contrast, in a microservice architecture, we have no way of knowing &lt;em&gt;exactly&lt;/em&gt;
which module has been deployed at any given time. If we want to avoid breaking
changes, we need to handle cases where &lt;em&gt;some&lt;/em&gt; of the new services have been
deployed, but not all.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;This grows with the number of services, since we need to handle &lt;strong&gt;&lt;em&gt;any and
all&lt;/em&gt;&lt;/strong&gt; combinations of deployed services. So how can we easily understand the
state of any set of deployments?&lt;/p&gt;

&lt;h3 id=&quot;semantic-versioning&quot;&gt;Semantic Versioning&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://semver.org/spec/v2.0.0.html&quot;&gt;Semantic Versioning&lt;/a&gt; is a way of giving
meaning to the version of library code to make dependency management more
digestible. Its core tenants are:&lt;/p&gt;

&lt;div class=&quot;notice--primary&quot;&gt;
  
&lt;p&gt;Given a version number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR.MINOR.PATCH&lt;/code&gt;, increment the:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version when you make incompatible API changes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MINOR&lt;/code&gt; version when you add functionality in a backwards compatible manner&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; version when you make backwards compatible bug fixes&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;p&gt;A semantic version gives developers better confidence in integration between
services. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MINOR&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; version bump won’t impact existing clients,
though may add new functionality.&lt;/p&gt;

&lt;p&gt;It’s only when a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version is released that existing clients must adapt to
breaking changes in the API contract, modifying clients along the way.&lt;/p&gt;

&lt;h3 id=&quot;pet-store-sample-api&quot;&gt;Pet Store (Sample API)&lt;/h3&gt;
&lt;p&gt;To draw some examples, let’s expand on the online order API from above, &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/tree/master/samples/yaml&quot;&gt;taken
from OpenAPI Generator’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;samples&lt;/code&gt;
library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This simple API, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet Store&lt;/code&gt;, outlines a storefront where users can place
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt;s for their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet&lt;/code&gt;s. There are exposed endpoints for most &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD
operations&lt;/a&gt; to
modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet&lt;/code&gt;s and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt;s.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For simplicity, we’re using readable function names &lt;em&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getPetById()&lt;/code&gt;)&lt;/em&gt; instead of
the URI a client would call &lt;em&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /pet/{petId}&lt;/code&gt;)&lt;/em&gt;.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    Order &amp;lt;|-- OrderStatus
    Pet &amp;lt;|-- Tag
    Pet &amp;lt;|-- PetStatus
    Pet &amp;lt;|-- Category
    class Order {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
        getOrderById(String orderId) Order
        deleteOrder(String orderId) void
        placeOrder(Order order) void
    }
    class OrderStatus {
        PLACED
        APPROVED
        DELIVERED
    }
    class Tag {
        Int id
        String name
    }
    class Pet {
        Int id
        List~Tag~? tags
        String name
        PetStatus? status
        Category? category
        List~String~? photoUrls
        getPetById(String petId) Pet
        deletePet(String petId) void
        addPet(Pet pet) void
        updatePet(Pet pet) void
        findPetsByStatus(Status status) List~Pet~
        findPetsByTags(List~Tags~ tags) List~Pet~
    }
    class Category {
        Int id
        String name
    }
    class PetStatus {
        AVAILABLE
        PENDING
        SOLD
    }
&lt;/div&gt;

&lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; I will be using UML-&lt;em&gt;like&lt;/em&gt; diagrams in this article. I am not using
&lt;a href=&quot;https://mermaid.js.org/syntax/classDiagram.html#visibility&quot;&gt;Mermaid’s explicit class
syntax&lt;/a&gt; for my
definitions, but rather, leveraging Mermaid as a means of quickly depicting
examples.&lt;/p&gt;

&lt;p&gt;Here is a breakdown of the models and API. We can see some getters/setters for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet&lt;/code&gt; along with some search capabilities for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet&lt;/code&gt;s by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Category&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Keep a (rough) outline of this application in your head as we outline how the
contracts can be broken:&lt;/p&gt;

&lt;h2 id=&quot;breaking-api-changes&quot;&gt;Breaking API Changes&lt;/h2&gt;
&lt;p class=&quot;notice--success&quot;&gt;In general, to consider if a change will be breaking, it can be good to think of
it from the perspective, &lt;strong&gt;“will an older client be unable to perform existing
behavior?”&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;removing-an-operation&quot;&gt;Removing an Operation&lt;/h3&gt;
&lt;p&gt;This is probably the most obvious example of a breaking change.&lt;/p&gt;

&lt;p&gt;There’s not a good way to deal with a client attempting to call an endpoint that
no longer exists. The API has changed, so – in the best case – we must make
that clear with our next semantic version so that users can adapt.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Once functionality has been established in the contract, we must uphold that
until a new version of the API is cut. (Though &lt;a href=&quot;#deprecation&quot;&gt;deprecation is an
option&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For example, let’s say that – for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet Store&lt;/code&gt; – we realize that we actually
&lt;em&gt;don’t&lt;/em&gt; want users to be able to delete orders &lt;em&gt;(perhaps they’re expecting this
functionality can cancel their orders, but on our backend, payments are final)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We would have to declare that as an entirely new, major version of the API,
which means more pain for users who must adjust each caller:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    Order ..&amp;gt; Removed : BREAKING
    Order --|&amp;gt; Added : Minor Version
    class Order {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
        getOrderById(String orderId) Order
        deleteOrder(String orderId) void
        placeOrder(Order order) void
    }
    class Added {
        getOrdersShippedSince(DateTime date) List~Order~
    }
    class Removed {
        deleteOrder(String orderId) void
    }
&lt;/div&gt;

&lt;p class=&quot;notice--primary&quot;&gt;By contrast, &lt;em&gt;adding&lt;/em&gt; an operation is not a breaking change, since any existing
client will not be able to perform functionality that did not yet exist.
&lt;br /&gt;&lt;br /&gt;
For this reason, creating a new version of an API can be a good way to minimize
the impact of otherwise breaking changes. &lt;em&gt;(&lt;a href=&quot;#versioning-endpoints-and-apis-separately&quot;&gt;More examples
below&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;adding-a-new-requirement&quot;&gt;Adding a New Requirement&lt;/h3&gt;
&lt;p&gt;This is another fairly straightforward example. Requirements to existing API
calls – such as additional parameters – will break the current clients that
are unaware of such obligations.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet Store&lt;/code&gt; as an example again, if we were to add a new required field to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt;, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;purchaseDate&lt;/code&gt;, this would break all existing client calls, since
they are unaware of this parameter.&lt;/p&gt;

&lt;p&gt;We can demote this to a Minor Version change by making the parameter
&lt;strong&gt;optional&lt;/strong&gt;. This is because existing clients can still make a valid version of
the call.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;When introducing new, optional parameters, it is wise to consider what the
default value(s) of that field will be, since all existing callers are – by
contract – able to continue calling the API without it.
&lt;br /&gt;&lt;br /&gt;
 &lt;em&gt;(Just because we &lt;strong&gt;can&lt;/strong&gt; add a parameter as an optional field doesn’t mean we
 &lt;strong&gt;should&lt;/strong&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    direction RL
    BreakingNewOrder &amp;lt;.. Order : BREAKING
    NonBreakingNewOrder &amp;lt;|-- Order : Minor Version
    class Order {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
    }
    class BreakingNewOrder {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
        +DateTime purchaseDate
    }
    class NonBreakingNewOrder {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
        +DateTime? purchaseDate
    }
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
We often want parameters to be required in order to reduce the scope of support
our server needs to provide. As such, it’s important to consider how the surface
of your models may change over time.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;Another scenario to consider is a new requirement on an already-existing
parameter. For example, if an incoming &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt; parameter, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, is now
required to be &lt;em&gt;positive&lt;/em&gt;, that would also be a breaking change.&lt;/p&gt;

&lt;h3 id=&quot;altering-a-parameter--response-field&quot;&gt;Altering a Parameter / Response Field&lt;/h3&gt;
&lt;p&gt;Perhaps the sneakiest of our breaking change examples: even renaming a field is
a breaking change.&lt;/p&gt;

&lt;p&gt;Although the general shape of data in a model may hold for renamed parameters,
the schema of the models has still changed, so callers must adjust accordingly.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Perhaps &lt;a href=&quot;https://en.wiktionary.org/wiki/bikeshedding&quot;&gt;bikeshedding&lt;/a&gt; on variable
names &lt;em&gt;is&lt;/em&gt; worth it?&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    direction RL
    AlteredOrder &amp;lt;.. Order : BREAKING
    class Order {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
    }
    class AlteredOrder {
        Int id
        OrderStatus status
        Int petId
        *Int amountOrdered
        DateTime shipDate
    }
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
In this example, we’ve renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quantity&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amountOrdered&lt;/code&gt; for “readability”,
&lt;strong&gt;breaking&lt;/strong&gt; anyone using the current version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet Store&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;non-breaking-api-changes&quot;&gt;Non-Breaking API Changes&lt;/h2&gt;
&lt;p&gt;There are ways of introducing changes without breaking the API. However, while
it may be tempting to use some of these ideas to work around problems with Major
Version changes, there are – as in much of software engineering – tradeoffs.&lt;/p&gt;

&lt;h3 id=&quot;adding-an-optional-parameter--header&quot;&gt;Adding an Optional Parameter / Header&lt;/h3&gt;
&lt;p&gt;As &lt;a href=&quot;#removing-an-operation&quot;&gt;mentioned above&lt;/a&gt;, we can introduce a new parameter
without breaking the API by making it optional. In some cases, this is valid,
but in others it can introduce complexity.&lt;/p&gt;

&lt;p&gt;Take this example in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet Store&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;We add a new, optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfactionRating&lt;/code&gt; to users’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt;s. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; value
for this is easy to handle, since we don’t anticipate users to rate every
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt;, even after introducing this feature.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    direction RL
    NewOrder &amp;lt;|-- Order : Minor Version
    class Order {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
    }
    class NewOrder {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
        +Int? satisfactionRating
    }
&lt;/div&gt;

&lt;p&gt;As a result, this change isn’t so much working around breaking changes, but
rather a natural evolution of this API.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;Consider, instead, the addition of the &lt;em&gt;optional&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;purchaseDate&lt;/code&gt; field in &lt;a href=&quot;#removing-an-operation&quot;&gt;the
example above&lt;/a&gt;. It introduces edge behavior because how
do we handle a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;? We would expect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;purchaseDate&lt;/code&gt; to be known.&lt;/p&gt;

&lt;h3 id=&quot;adding-enum-values&quot;&gt;Adding Enum Values&lt;/h3&gt;
&lt;p&gt;Adding Enum variants is another way to avoid breaking changes. Existing clients
will be limited to only the old set of options, but they can still perform any
operations like they used to.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    RemovedOrderStatus &amp;lt;.. OrderStatus : BREAKING
    AddedOrderStatus &amp;lt;|-- OrderStatus : Minor Version
    class OrderStatus {
        PLACED
        APPROVED
        DELIVERED
    }
    class RemovedOrderStatus {
        PLACED
        APPROVED
    }
    class AddedOrderStatus {
        PLACED
        APPROVED
        DELIVERED
        CANCELLED
    }
&lt;/div&gt;

&lt;p&gt;Deleting a variant, on the other hand, is a breaking change, since we are
removing a possible operation. Existing clients will break anytime they send the
now-removed Enum value.&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;Enums can be a great, natural way to vertically iterate on API design without
needing to cut a new Major Version.
&lt;br /&gt;&lt;br /&gt;
For example, we can add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CANCELLED&lt;/code&gt; variant once we’ve implemented a
cancellation policy in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet Store&lt;/code&gt;, all without introducing breaking changes.&lt;/p&gt;

&lt;h3 id=&quot;adding-a-response-field--header&quot;&gt;Adding a Response Field / Header&lt;/h3&gt;
&lt;p&gt;While the client may not understand the information added to the response, it’s
perfectly valid for a server to return &lt;em&gt;more&lt;/em&gt; information than the caller
expects since response deserializers can drop the extra information.&lt;/p&gt;

&lt;p&gt;Since there are no Response-only types in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet Store&lt;/code&gt; (and thus, any added
Response field would also change a Request field), in our example, let’s instead
imagine that we’re adding a new cookie in a header, like so:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;headers:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'Set-Cookie':&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'myKey=myValue;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any existing client can ignore this cookie (or, depending on the browser, maybe
still execute it). But there’s no &lt;em&gt;expected&lt;/em&gt; behavior from a client based on
this new Response field.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For this reason, most response fields are considered optional in the API
contract, since clients should be able to ignore those values when new
functionality is added.&lt;/p&gt;

&lt;h2 id=&quot;how-to-make-breaking-changes&quot;&gt;How to Make Breaking Changes&lt;/h2&gt;
&lt;p&gt;In some (many) cases, we &lt;em&gt;want&lt;/em&gt; to make a breaking change to our API. While we
should be aware that existing callers must update when migrating to a new
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version, we can take advantage of this larger shift to simplify or
improve our API surface when forcing users to take on breaking changes.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For example, &lt;a href=&quot;#removing-an-operation&quot;&gt;as mentioned above&lt;/a&gt;, perhaps we &lt;em&gt;want&lt;/em&gt; to
remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deleteOrder()&lt;/code&gt; behavior from users, as we don’t have the ability to
cancel orders in our system.&lt;/p&gt;

&lt;p&gt;As a reminder, once we’ve exposed an API to users, we must support it for the
short-term. A new version can remove behavior, though we should give users ample
time to adapt.&lt;/p&gt;

&lt;h3 id=&quot;deprecation&quot;&gt;Deprecation&lt;/h3&gt;
&lt;p&gt;Deprecation is a step-by-step process to help users prepare for change. In
general, designers deprecate an endpoint – notifying users that they should
move away from it – before eventually removing it.&lt;/p&gt;

&lt;p&gt;While deprecation is a good way to inform users that an endpoint will no longer
be supported, it’s also a good way of creating a backlog of items to remove in
the next &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version bump.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    V1[[v1.0.0]]
    V2[[v1.1.0]]
    V3[[v2.0.0]]
    V1 -. &quot;deprecation&quot; .-&amp;gt; V2
    V2 -. &quot;removal&quot; .-&amp;gt; V3
&lt;/div&gt;

&lt;p class=&quot;notice--danger&quot;&gt;There are many ways to handle deprecation (and eventual removal) of APIs, though
the key is to respect how existing users may be calling your code.&lt;/p&gt;

&lt;p&gt;Typically, endpoints are deprecated for one or more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MINOR&lt;/code&gt; versions and are
then eventually removed in the next &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version (which can introduce
breaking changes).&lt;/p&gt;

&lt;h3 id=&quot;making-major-version-changes&quot;&gt;Making Major Version Changes&lt;/h3&gt;
&lt;p&gt;Releasing a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version is a big deal. Existing users must update their
callers to reflect the new state of the API contract.&lt;/p&gt;

&lt;p&gt;As such, it’s important to make our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version updates &lt;em&gt;actually&lt;/em&gt; major! I
believe that new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; versions of APIs should cull deprecated APIs and make
radical changes as needed, because when else are you going to do it?&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; API version doesn’t &lt;em&gt;need&lt;/em&gt; to remove all deprecated APIs, though
given that Major Version bumps should be performed (relatively) sparingly,
grouping breaking API changes together is appreciated.&lt;/p&gt;

&lt;p&gt;Consider that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version bumps will require real, in-depth changes &lt;em&gt;(e.g.
endpoints may no longer be available)&lt;/em&gt;. Thus, since users will already be
modifying code to support a new major version of the API, grouping breaking
changes together can make an upgrade more palatable.&lt;/p&gt;

&lt;p class=&quot;notice--success&quot;&gt;Would you rather fix &lt;strong&gt;five&lt;/strong&gt; units breaking code of breaking code &lt;em&gt;once&lt;/em&gt;, or
&lt;strong&gt;one&lt;/strong&gt; unit of breaking code &lt;em&gt;five&lt;/em&gt; times?&lt;/p&gt;

&lt;h3 id=&quot;versioning-endpoints-and-apis-separately&quot;&gt;Versioning Endpoints and APIs Separately&lt;/h3&gt;
&lt;p&gt;Since we want to limit frequency of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version bumps, it can sometimes be
valuable to version endpoints and the API contract itself separately.&lt;/p&gt;

&lt;p&gt;For example, since adding a &lt;strong&gt;&lt;em&gt;new&lt;/em&gt;&lt;/strong&gt; endpoint is considered a
backwards-compatible change (and so, only requires a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MINOR&lt;/code&gt; version bump), we
can create an endpoint that &lt;strong&gt;&lt;em&gt;extends&lt;/em&gt;&lt;/strong&gt; existing behavior to avoid cutting
a breaking change to the API contract.&lt;/p&gt;

&lt;p&gt;Look at how a new endpoint allows us to add a required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;purchaseDate&lt;/code&gt; field
&lt;em&gt;without&lt;/em&gt; cutting a breaking change to the API:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    direction RL
    BreakingNewOrder &amp;lt;.. Order : BREAKING
    NonBreakingNewOrder &amp;lt;|-- Order : Minor Version
    class Order {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
        getOrderById(String orderId) Order
        deleteOrder(String orderId) void
        placeOrder(Order order) void
    }
    class BreakingNewOrder {
        +DateTime purchaseDate
    }
    class NonBreakingNewOrder {
        +placeOrderV2(Order order, DateTime purchaseDate) void
    }
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
We can alternatively do this by defining a new, renamed type of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt;
model:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    class OrderV2 {
        Int id
        OrderStatus status
        Int petId
        Int quantity
        DateTime shipDate
        +DateTime purchaseDate
        getOrderById(String orderId) Order
        deleteOrder(String orderId) void
        placeOrder(Order order) void
    }
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Existing callers of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Order&lt;/code&gt; endpoints should still work as intended (and, to
recall, &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt; be supported). In the meantime, users can upgrade and use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderV2&lt;/code&gt; to take advantage of new behavior.&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;The downside of this approach is that multiple variants of a call must be
supported at once.
&lt;br /&gt;&lt;br /&gt;
Similar to adding an optional requirement, we must still decide what we do with
orders that &lt;em&gt;don’t&lt;/em&gt; provide a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;purchaseDate&lt;/code&gt;, since – according to the API
contract – we &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt; support callers of the old endpoint unless we cut a
breaking change.&lt;/p&gt;

&lt;h2 id=&quot;using-openapi&quot;&gt;Using OpenAPI&lt;/h2&gt;
&lt;p&gt;OpenAPI &lt;em&gt;(formerly known as Swagger)&lt;/em&gt; is a specification for writing APIs for
both client- and server-side consumption.&lt;/p&gt;

&lt;p&gt;Path templates (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /order/{orderId}&lt;/code&gt;) and data types (also called models)
are defined to indicate how providers of the API should respond to callers as
well as how users should expect the API to behave.&lt;/p&gt;

&lt;p&gt;For example, here’s &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/tree/master/samples/yaml&quot;&gt;the complete specification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet
Store&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;language-agnosticism-the-good&quot;&gt;Language Agnosticism (the Good)&lt;/h3&gt;
&lt;p&gt;The OpenAPI specs are designed to be language agnostic so that any user can
define a client or server which meets the specification.&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;The spec is just a contract – much like an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; – that can be
implemented for seamless interaction between server and client.&lt;/p&gt;

&lt;p&gt;The advantages are that front- and back-end implementations can be built in any
type of infrastructure, so long as the contract is respected. This makes it
easier to grow a userbase by lifting a limit on language.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart LR
    S&amp;gt;openapi-spec.yml]
    C1[[Client.kt]]
    C2[[Client.rs]]
    C3[[Client.ts]]
    S --&amp;gt; C1
    S --&amp;gt; C2
    S --&amp;gt; C3
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
This general-purpose format also encourages auto-generation, like via
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openapi-generator&lt;/code&gt;, since REST clients and server stubs are trivial to
implement in most cases.  This makes taking on new versions much simpler.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart LR
    S1&amp;gt;1.0.0-spec.yml]
    S2&amp;gt;1.1.0-spec.yml]
    S3&amp;gt;2.0.0-spec.yml]
    G{{openapi-generator}}
    S1 --&amp;gt; G
    S2 --&amp;gt; G
    S3 --&amp;gt; G
    C[[ClientLibrary]]
    G --&amp;gt; C

&lt;/div&gt;

&lt;h3 id=&quot;language-agnosticism-the-bad&quot;&gt;Language Agnosticism (the Bad)&lt;/h3&gt;
&lt;p&gt;Unfortunately, across languages, there may not be the common understanding of
types that’s present in the OpenAPI spec.&lt;/p&gt;

&lt;p&gt;For example, Kotlin and Rust might understand differences between sized,
numerical values, but TypeScript only sees everything as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt;:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
    direction LR
    OrderIdKt .. OrderIdRs
    OrderIdRs .. OrderIdTs
    class OrderIdKt {
        UByte id8
        UShort id16
        UInt id32
        ULong id64
    }
    class OrderIdRs {
        u8 id8
        u16 id16
        u32 id32
        u64 id64
    }
    class OrderIdTs {
        number id8
        number id16
        number id32
        number id64
    }
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Additionally, hand-rolled clients might provide additional semantics due to
understood behavior by the author.&lt;/p&gt;

&lt;p&gt;A common example would be returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; instead of a 404 error for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;
operations, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; often carries a clearer meaning than an error in code:&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;

flowchart TB
    H[[HandrolledClient]]
    C1(Server returns NOT_FOUND)
    H -. &quot;GET /order/{orderId}&quot; .-&amp;gt; C1
    C1 --&amp;gt; E1{{ returns NULL }}
    G[[GeneratedClient]]
    C2(Server returns NOT_FOUND)
    G -. &quot;GET /order/{orderId}&quot; .-&amp;gt; C2
    C2 --&amp;gt; E2{{ raises 404 Exception }}

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
This can add additional cost to supporting auto-generated clients, though
wrapper types can be used to keep the custom behavior:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clientApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientApi&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderApi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.clientApi&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orderId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;// Successful responses are returned&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;// Cast 404s to an empty `Option`&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NOT_FOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;// Other errors are raised normally&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;client-and-server-generation&quot;&gt;Client and Server Generation&lt;/h3&gt;
&lt;p&gt;We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openapi-generator&lt;/code&gt; to produce both clients and server stubs based on
a spec. This can be a powerful way of reducing boilerplate code required by
engineers to support your endpoints.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;A detailed guide on how to setup the generator can be found on &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator#1---installation&quot;&gt;their Github
page, here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While various generators have mixed support (which is why I hesitate to dive
deep into a specific generator for this article), hopefully it’s been made clear
the incentives of generation and why clear definitions of APIs via a spec is
preferred.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Regardless of your method of &lt;em&gt;implementing&lt;/em&gt; APIs, its important to consider how
your public interfaces may change over time so that they can be modified in a
way that minimizes impact on users.&lt;/p&gt;

&lt;p&gt;While we can utilize techniques to circumvent the need to create breaking API
changes, we must be aware of the tradeoffs made to avoid a break. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; value
is not always easy to handle in a robust way from the backend.&lt;/p&gt;

&lt;p&gt;Once we make a functionality public, we &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt; support its callers until
cutting a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version. And while breaking API changes can be avoided,
sometimes it’s important to force users to take on changes to reduce the scope
of supportability.&lt;/p&gt;

&lt;p&gt;Don’t be afraid to cut a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAJOR&lt;/code&gt; version of your API, but be aware of the
impact it may have on users, internal and external.&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Programming" /><category term="api" /><category term="infrastructure" /><category term="open-api" /><category term="rust" /><category term="swagger" /><summary type="html">How to design and version APIs along with a touch of automated client and server creation.</summary></entry><entry><title type="html">A Guide to Hosting Static Content via Jekyll &amp;amp; GitHub Pages</title><link href="https://carsonboden.com/programming/2023/04/06/jekyll-pages.html" rel="alternate" type="text/html" title="A Guide to Hosting Static Content via Jekyll &amp;amp; GitHub Pages" /><published>2023-04-06T00:00:00-07:00</published><updated>2023-04-22T00:06:49-07:00</updated><id>https://carsonboden.com/programming/2023/04/06/jekyll-pages</id><content type="html" xml:base="https://carsonboden.com/programming/2023/04/06/jekyll-pages.html">&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/jekyll-site-droste.png&quot; alt=&quot;A Droste Effect cascading image of my Jekyll site on this page.&quot; /&gt;&lt;/figure&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;It’s been over a year since I’ve migrated my personal site to Jekyll. I had
originally considered using React, as a way to practice a widely used
technology, but quickly learned that there wasn’t actually much reactivity that
I needed from my site (and so, not much to practice on).&lt;/p&gt;

&lt;p&gt;It was then that I stumbled upon Jekyll and learned the appeal (and different
approach) of static content sites. Here is some of what I’ve learned:&lt;/p&gt;

&lt;h2 id=&quot;static-content&quot;&gt;Static Content&lt;/h2&gt;
&lt;p&gt;On the web, there are two main types of content: static and dynamic. The core
difference is in how content changes or responds to the user. In a static
website, content is stable and consistent for every user. Dynamic sites,
however, might pull content on-the-fly based on the specific user.&lt;/p&gt;

&lt;p&gt;When the internet was still in its infancy, static content reigned supreme
since processing power was limited and web browsers didn’t have consistent
library support. Most users could load HTML, maybe with some custom CSS, but
(at the time) weren’t prepared to run code from the client-side.&lt;/p&gt;

&lt;p&gt;However, as computers improved, the needle has since shifted nowadays towards
shiny, new, dynamic content, leaving many to forget about the appeal of static
sites.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    Client (User)-&amp;gt;&amp;gt;Server: I want to access `https://carsonboden.com`
    Server-&amp;gt;&amp;gt;Client (User): Here is the HTML for that page, have a nice day.
&lt;/div&gt;
&lt;figcaption&gt;
  The interaction between client and server for a static website is
  straightforward; since the content doesn't change, the server returns the same
  HTML each time.
&lt;/figcaption&gt;

&lt;h3 id=&quot;compared-to-dynamic-content&quot;&gt;Compared to Dynamic Content&lt;/h3&gt;
&lt;p&gt;Dynamic content is the standard for most websites now that phones, computers,
and tablets are efficient enough to handle updates from the client side. Common
frameworks like React are designed around updating content to respond to user
interaction.&lt;/p&gt;

&lt;p&gt;This user-specific interaction is especially important when it comes to custom
content, like a feed of customer-controlled subscriptions or the organization of
posts based on an engagement algorithm. Typically, updates are handled via
scripting languages, such as JavaScript, to modify the HTML and CSS as needed.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    Client (User)-&amp;gt;&amp;gt;Server: I want to access `https://linkedin.com`
    Server-&amp;gt;&amp;gt;Client (User): Here is the HTML and associated scripts for that page.
    loop As the page is used:
        note right of Client (User): Run scripts as user logs in, clicks elements, etc.
        Client (User)--&amp;gt;&amp;gt;Server: Scripts call server endpoints to fetch additional data
        Server--&amp;gt;&amp;gt;Client (User): Server talks with DB / blob storage to serve client requests
    end
&lt;/div&gt;
&lt;figcaption&gt;
  Dynamic sites also include scripts which can change the page's content,
  responding to the user and their input, though also requiring more processing
  on the client-side.
&lt;/figcaption&gt;

&lt;h3 id=&quot;when-to-use-each&quot;&gt;When to Use Each&lt;/h3&gt;
&lt;p&gt;Static pages are best for content with infrequent modifications, like a blog,
portfolio, or documentation site. They are often easier to manage due to a lack
of database or client-server integration. In addition, load times are quick
because caching is simpler to manage with pages that won’t change.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Search engine optimizations (SEOs) often heavily weights page load speeds,
meaning that static sites can boost content higher up in the search rankings.&lt;/p&gt;

&lt;p&gt;By contrast, though, users can’t engage much with a static site. If you’re
building a web application or platform meant for user engagement, dynamic sites
are probably what you want.&lt;/p&gt;

&lt;p&gt;The ability to interact comes at a cost, though. Dynamic sites must have
external resources, like databases or blob storage in order to track the state
of various users, since pages change responsively.&lt;/p&gt;

&lt;h2 id=&quot;using-jekyll-for-static-sites&quot;&gt;Using Jekyll for Static Sites&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a simple, static site generator that can turn
common markup languages like Markdown or Liquid &lt;em&gt;(discussed more below)&lt;/em&gt; into a
complete website, ready to be hosted by most web servers. It’s what powers
GitHub pages, which is also used to create this blog site.&lt;/p&gt;

&lt;p&gt;The Jekyll gem is written in Ruby, though, since you don’t &lt;em&gt;need&lt;/em&gt; to learn Ruby
to use Jekyll (though it can help for some customization), we won’t be engaging
with that much. The core simplicity of managing a Jekyll site is its
organization via the file system:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docs/
├── assets/
│   └── &amp;lt;images, fonts, diagrams, etc.&amp;gt;
├── _config.yml
├── Gemfile
├── _pages/
│   ├── 404.md
│   └── about.md
└── _posts/
    ├── 2022-07-13-git-basics.md
    ├── 2022-11-20-automating-deployments.md
    └── 2023-04-06-jekyll-pages.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/&lt;/code&gt; are turned into single, standalone pages needed by users. An
“About” page is a classic, as would be a “FAQ” or even the 404 page that users
find when clicking a malformed link.&lt;/p&gt;

&lt;p&gt;Everything in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts/&lt;/code&gt; is the blog content. They must follow the format
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt; so that Jekyll can sort and organize the posts
accordingly.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;There are other possible folders, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass/&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/&lt;/code&gt;, which can be
used for custom components and theming, but we won’t cover that in this article.
I recommend &lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;Jekyll’s docs&lt;/a&gt;, which are
quite comprehensive.&lt;/p&gt;

&lt;p&gt;In order to write posts, though, we need to be familiar with the format that
Jekyll expects. This is where markup comes in:&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;Markdown&lt;/h3&gt;
&lt;p&gt;Markdown is the most ubiquitous markup language today, mainly due to the
readability of its source code. The basic syntax makes it easy to perform common
word-processing formats like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**bold**&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_italics_&lt;/code&gt;, or `code` which Jekyll
transforms into what you see on the page.&lt;/p&gt;

&lt;p&gt;The syntax has become commonplace, even outside of Markdown documents, with
platforms like &lt;a href=&quot;https://www.markdownguide.org/tools/reddit/&quot;&gt;Reddit&lt;/a&gt;,
&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;, or &lt;a href=&quot;https://slab.com/&quot;&gt;Slab&lt;/a&gt; applying Markdown
formatting right inside of a message or article. You can learn more advanced
syntax on &lt;a href=&quot;https://www.markdownguide.org/cheat-sheet/&quot;&gt;their documentation
page&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Posts are written in Markdown, so they can be stored as code but then processed
by Jekyll to render a richer experience. For example, &lt;a href=&quot;https://github.com/cwboden/.dotfiles/blob/main/docs/_posts/2023-04-06-jekyll-pages.md&quot;&gt;here’s the source code
for this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;liquid&quot;&gt;Liquid&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a lesser known markup language –
also powered by Ruby – and incorporated into Jekyll’s standard build process.
It’s used for templating, allowing users to pass in data objects and produce
similarly shaped pages or page elements.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For example, each post in this blog has properties like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;excerpt&lt;/code&gt;
which Jekyll uses, along with the Liquid templates defined by the theme, to
create the feed of recent posts on the home page.&lt;/p&gt;

&lt;p&gt;This guide won’t walk through customization via Liquid, since there are already
dozens of great examples from existing open source themes. If you like how this
page looks, I use Michael Rose’s &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;Minimal
Mistakes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mermaid&quot;&gt;Mermaid&lt;/h3&gt;
&lt;p&gt;The final markup language I highly recommend is
&lt;a href=&quot;https://mermaid.js.org/&quot;&gt;Mermaid&lt;/a&gt;. It’s a lightweight diagramming language
built in JavaScript that uses Markdown-inspired syntax.&lt;/p&gt;

&lt;p&gt;I find Mermaid’s declarative approach to diagrams much easier to edit than
full-fledged, responsive applications like LucidChart. Though for more complex
diagramming, Mermaid can get difficult to read.&lt;/p&gt;

&lt;p&gt;This smaller block of code, though, is fairly easy to parse – even without
knowing the syntax – and will create the following diagram:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flowchart TD
    A[Free Time] --&amp;gt;B(Write a blog post)
    B --&amp;gt; C{Any new ideas?}
    C --&amp;gt; D[Game Development]
    C --&amp;gt; E[More Neon White]
    C --&amp;gt; |This one!| F[Jekyll Sites]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    A[Free Time] --&amp;gt;B(Write a blog post)
    B --&amp;gt; C{Any new ideas?}
    C --&amp;gt;D[Game Development]
    C --&amp;gt;E[More Neon White]
    C --&amp;gt;|This one!| F[Jekyll Sites]
&lt;/div&gt;

&lt;p&gt;Mermaid doesn’t work natively with Jekyll, though we can add the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-mermaid&lt;/code&gt; gem to the project to add a Liquid template we can use.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;I had some issues with the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-mermaid&lt;/code&gt; package, so cut my own fork
that uses the latest version of Mermaid. You can specify a custom fork of the
gem by adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;branch&lt;/code&gt; properties
to your Gemfile:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-mermaid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cwboden/jekyll-mermaid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;/h2&gt;
&lt;p&gt;As mentioned above, GitHub Pages is powered by Jekyll. We can combine a few
technologies here to quickly spin up a blog! &lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll&quot;&gt;Their
walkthrough&lt;/a&gt;
is comprehensive, so I won’t rewrite the basic setup in this post, though I’ll
call out some additional notes from my experience, below.&lt;/p&gt;

&lt;h3 id=&quot;safe-deploy-process&quot;&gt;“Safe” Deploy Process&lt;/h3&gt;
&lt;p&gt;GitHub by default uses a Jekyll “safe” deployment (specified with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--safe&lt;/code&gt;
flag when building via Jekyll). This makes the setup from their guide much
simpler, since GitHub Actions handles most of the deployment process.&lt;/p&gt;

&lt;p&gt;However, as it blocks any plugins not on GitHub’s allow list, it prevents
any custom behavior from being loaded. This is a problem if you’re hoping to add
specific plugins like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-mermaid&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--success&quot;&gt;Fortunately, there’s a way to deploy via custom GitHub Workflows, meaning we can
get around this problem.&lt;/p&gt;

&lt;h3 id=&quot;deploying-via-github-workflows&quot;&gt;Deploying via GitHub Workflows&lt;/h3&gt;
&lt;p&gt;GitHub has a feature called Workflows, enabling repositories to run commands on
cloud resources. This can be great for automating tests, generating build
artifacts, and scripted deployments.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;You can read &lt;a href=&quot;https://carsonboden.com/programming/2022/11/20/automating-deployments.html&quot;&gt;more about build and deployment automation via GitHub Workflows in
this post&lt;/a&gt;.
Or check out &lt;a href=&quot;https://github.com/cwboden/.dotfiles/tree/main/.github/workflows&quot;&gt;the source files,
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our case of deploying a Jekyll site, we’re fortunate that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jeffreytse&lt;/code&gt; has
already provided &lt;a href=&quot;https://github.com/jeffreytse/jekyll-deploy-action&quot;&gt;a useful action for deploying the
site&lt;/a&gt;. With just one code
block, we can trigger a fresh build and deploy anytime we merge into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Use GitHub Deploy Action to build and deploy to Github Page&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jeffreytse/jekyll-deploy-action@master&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Your Personal Access Token (PAT)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jekyll_src&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./docs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--success&quot;&gt;And there we have it! By integrating a few technologies we can automate the
translation of simple-to-write Markdown documents into a rich, static site
experience.&lt;/p&gt;

&lt;h3 id=&quot;utterances-integration&quot;&gt;Utterances Integration&lt;/h3&gt;
&lt;p&gt;As an added bonus, I recently learned about
&lt;a href=&quot;https://github.com/utterance/utterances&quot;&gt;Utterances&lt;/a&gt; and wanted to share. It’s
a comment widget built novelly on top of GitHub Issues.&lt;/p&gt;

&lt;p&gt;This was an extremely lightweight way to add comment support to articles, though
it does require any poster to login to a GitHub account. The fact that it uses
the Issues API on the backend, though, means that it can bring discussions about
bugs and blog posts together – fun, yet wacky!&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;The widget is down below:&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Programming" /><category term="automation" /><category term="jekyll" /><category term="markdown" /><category term="mermaid" /><category term="liquid" /><summary type="html">How the simple-but-powerful technology behind this site works, and how to make deeper customizations with manual deployments.</summary></entry><entry><title type="html">Exploring: The Level Design of *Neon White*</title><link href="https://carsonboden.com/video%20games/2023/03/08/neon-white-level-walkthrough.html" rel="alternate" type="text/html" title="Exploring: The Level Design of *Neon White*" /><published>2023-03-08T00:00:00-08:00</published><updated>2023-04-06T19:59:33-07:00</updated><id>https://carsonboden.com/video%20games/2023/03/08/neon-white-level-walkthrough</id><content type="html" xml:base="https://carsonboden.com/video%20games/2023/03/08/neon-white-level-walkthrough.html">&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/neon-white-splash.jpg&quot; alt=&quot;Neon White splash art&quot; /&gt;
&lt;/figure&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;16 Jun 2022 &lt;em&gt;(PC)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Angel Matrix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Annapurna Interactive&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;That’s not a typo in the title. While the baseline routes through each of &lt;em&gt;Neon
White&lt;/em&gt;’s ninety-seven levels are challenging and zippy, they are designed to be
both carefully explored and naturally discovered, with multiple speedrunning
optimizations baked into every level.&lt;/p&gt;

&lt;p&gt;Let’s dive into one of them to highlight the choreographed nature of the game’s
design. We’ll be looking at &lt;em&gt;Covenant: Hanging Gardens&lt;/em&gt;, the first level of the
sixth mission. But first, here’s a quick explanation of the game for the
uninitiated:&lt;/p&gt;

&lt;h3 id=&quot;neon-white-brief&quot;&gt;&lt;em&gt;Neon White&lt;/em&gt; Brief&lt;/h3&gt;
&lt;p&gt;As a demon slayer in Heaven, you must complete each level by killing every demon
and making it to the Finish. The player can pick up weapon cards to shoot at
demons, though they can also discard those weapons for powerful movement
abilities.&lt;/p&gt;

&lt;figure class=&quot;align-left&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/balloon-demon.webp&quot; alt=&quot;A balloon demon&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;The movement abilities – which are also used to vanquish enemies – lead to an
exciting, fluid, parkour-like experience. This is further &lt;strong&gt;demon&lt;/strong&gt;strated by
the fact that some of them are deliberately designed to be jumped on, such as
the Balloon Demon &lt;em&gt;(pictured here)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While there are, sadly, no balloon demons in this level, it does contain the
following cards, for reference:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Card&lt;/th&gt;
      &lt;th&gt;Weapon&lt;/th&gt;
      &lt;th&gt;Effect&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevate&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Pistol&lt;/td&gt;
      &lt;td&gt;Double jump&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Purify&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Machine Gun&lt;/td&gt;
      &lt;td&gt;Launch an explosive bomb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Rifle&lt;/td&gt;
      &lt;td&gt;Dash forward, destroying enemies&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Slam&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Uzi&lt;/td&gt;
      &lt;td&gt;Slam down, releasing a shockwave&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition, many of the demons are “infused” with a particular card, so they’ll
always drop them when slain. Demons have characteristics based on their card,
but for the purposes of this walkthrough, we need only understand which card
they drop.&lt;/p&gt;

&lt;h3 id=&quot;an-extra-dimension-of-speed&quot;&gt;An Extra Dimension of Speed&lt;/h3&gt;
&lt;p&gt;It’s important to call out that while the levels are each &lt;em&gt;designed&lt;/em&gt; for speed,
with players finding the fastest combination of firing and discarding their
weapon cards, there’s no maximum time for any level. It’s possible to complete
most levels at your own pace (including this one).&lt;/p&gt;

&lt;p&gt;There’s not a ton to explore with this dimension of playing through the game,
but it makes the game much more approachable, regardless of whether someone is a
speedrunner. And while we will see how different routes are baked into each
level, we can also appreciate that max times were not set.&lt;/p&gt;

&lt;p&gt;Now we can jump into how someone would naturally progress through the level, if
they were tackling the intended route:&lt;/p&gt;

&lt;h2 id=&quot;the-first-pass&quot;&gt;The First Pass&lt;/h2&gt;
&lt;p&gt;Although each level has shortcuts hiding in many places, there is also an
intentional route that, while slower, is still quite snappy once understanding
when to use the movement abilities. This gives players a chance to learn new
mechanics and the level’s themes but still practice more advanced skills or look
for shorter paths.&lt;/p&gt;

&lt;p&gt;This will be the default route for the level, which – along with shortcut
revealed by the game’s mystic Hand, &lt;em&gt;(discussed later)&lt;/em&gt; – is enough to pull the
coveted Platinum time for the level.&lt;/p&gt;

&lt;h3 id=&quot;introducing-the-laser-traps&quot;&gt;Introducing the Laser Traps&lt;/h3&gt;
&lt;p&gt;Immediately out of the gate, first-time players at &lt;em&gt;Covenant: Hanging Gardens&lt;/em&gt;
are informed of a new mechanic – Laser Traps – that they will be learning
about over the course of the level. Fresh eyes will use their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Katana&lt;/code&gt; on it,
quickly learning that the Laser Traps have 1HP and can destroy breakable
objects, like the door you need to move through.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-first-room.jpg&quot; alt=&quot;The first room in the level&quot; /&gt;&lt;figcaption&gt;
      The starting room, which requires the player to trigger a Laser
        Trap with their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Katana&lt;/code&gt; in order to move forward.

    &lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Next, the player turns the corner, picking up a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; card and encountering
a new problem: Laser Traps pointing at them! The model design and placement of
the lasers prompts the player to jump the beams, shooting the two traps on the
way over. With the traps taken care of, the player can then continue into the
next room, discarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; to break through a door and continue to the
next section.&lt;/p&gt;

&lt;p&gt;In the hallway with the lasers, the player learns another dimension of the new
Laser Traps: it can also instantly kill them! Players can test it out by walking
into the demonic beams instead of hopping over them – though their appearance
(and that the beam in the first room counts as a demon) – already invites
players to avoid and destroy them.&lt;/p&gt;

&lt;p&gt;The following leisurely walkaround to the door after destroying the traps gives
new players a chance to breathe, processing the mechanic a bit more, while more
experienced speed-runners might already be thinking about how to optimize away
the slow walk.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-first-enemy.jpg&quot; alt=&quot;The first real enemy encountered within the level.&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;After dashing through the wall with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt;, we are met with a familiar idea:
a Laser Trap pointing at a destroyable object. By striking it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Katana&lt;/code&gt;, the
player confirms what they may have already inferred, that the traps can also
kill enemies.&lt;/p&gt;

&lt;p&gt;They’ll then move onto some waterfall paths (which speed up player movement)
and repeat the process on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; demon. This teaches them another
important concept, since it takes two Laser Traps to kill the heftier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt;
demon.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-second-enemy.jpg&quot; alt=&quot;The second enemy, which requires both Laser Traps to kill.&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Moving forward, the player can collect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; card from the now-fallen
demon and use it to dash through a door into a room. There, aligned in a series,
is a Rube Goldberg machine of Laser Traps, ending in the door you need to move
through.&lt;/p&gt;

&lt;p&gt;Since the door is on a high platform, you’ll need to grab and discard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevate&lt;/code&gt;
to reach the top, making sure to shoot the start of the Laser Trap chain.&lt;/p&gt;

&lt;p&gt;The framing of the first Laser Trap in this room, similar to the spawn point,
draws the player’s eye, which they then follow like a path of dominoes. Despite
it being the first level with a Laser Trap, players can piece together a variety
of mechanics using the building blocks established earlier.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-elevate-room.jpg&quot; alt=&quot;The room with Elevate and a chain of Laser Traps.&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;These ideas are then expanded further in later levels. For example, in
&lt;em&gt;Covenant: Race&lt;/em&gt;, the player must run faster than a huge string of Laser Traps
to reach the end before being cut-off by the traps. Or how some of Neon Yellow’s
signature levels – where the player is unable to use the cards’ movement
abilities – use the Laser Traps as gates to different sections.&lt;/p&gt;

&lt;h3 id=&quot;giving-the-player-a-view&quot;&gt;Giving the Player a View&lt;/h3&gt;
&lt;p&gt;Following the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevate&lt;/code&gt; room is a straightforward waterfall path with two
enemies, pointed at again by the Laser Traps. Weaponless, the player must use
their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Katana&lt;/code&gt; to destroy the traps and slay the two demons, with the second one
providing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Slam&lt;/code&gt; card.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Slam&lt;/code&gt; is then immediately discarded, killing another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Slam&lt;/code&gt; demon below and
continuing on a waterfall path, picking up two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Purify&lt;/code&gt; cards along the way.
Here is where the player arrives at a vista with the final section of the level
before them – a perfect place to contemplate route improvements.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-ramp-before-drop.jpg&quot; alt=&quot;The edge of a waterfall path, right before the doorway to the remainder of the level&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;After receiving a Gold Medal on a level in &lt;em&gt;Neon White&lt;/em&gt;, the game will reward
you with a hint shaped like a hand, hidden somewhere in the level. Once touching
the Hand, it will trace a path showing you a faster way to travel. The
difficulty, though, can often be figuring out &lt;em&gt;how&lt;/em&gt; to move that way while still
taking care of the other demons.&lt;/p&gt;

&lt;p&gt;We can see that this hint is placed where the player has full vision of the rest
of the level. It prompts the player to jump down directly to the goal, skipping
the next section, but doesn’t explain how they can skip it. The player must
think – from their well-placed vantage point – about their next move.&lt;/p&gt;

&lt;p&gt;The Hand inspires players to start thinking intricately about what parts of the
level they can zoom through by providing guidance, but not completely
demonstrating how they can skip the last section. But to round things out,
let’s walkthrough the final, skippable section, for completion’s sake.&lt;/p&gt;

&lt;h3 id=&quot;finishing-out-the-level&quot;&gt;Finishing out the Level&lt;/h3&gt;
&lt;p&gt;As seen from the vista, the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Purify&lt;/code&gt; is used to break down the door. The
player must avoid some lasers on their way into the structure, similar to the
first section of the level. This time, however, they’re attached in a chain,
too.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-head-room-1.jpg&quot; alt=&quot;A room with Laser Traps to dodge and some demons near a door.&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Next, the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Purify&lt;/code&gt; is discarded to destroy the demons, door, and start of
the Laser Trap chain at the end of the hallway. The player then collects a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stomp&lt;/code&gt; from one of the demolished demons, quickly discarding it to crush
another demon, door, and laser chain group.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-final-stomp.jpg&quot; alt=&quot;The final dash, down to the end of the level.&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, the player collects another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stomp&lt;/code&gt; from the fallen demons and discards
it to dive below to the Finish, destroying the surrounding nearby demons and
completing the level. There’s not a ton to learn in this section, as it was
meant to be optimized out, as evidenced by the Hand.&lt;/p&gt;

&lt;p&gt;To sum it up, here is a diagram and corresponding path through the level. You
may need to download this image if you want zoom in. Opening it in another tab
also works.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;a href=&quot;/assets/img/neon-white/hanging-gardens-first-path.png&quot;&gt;
    &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-first-path.png&quot; alt=&quot;A diagram of the first route throught the level.&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;my-optimized-route&quot;&gt;My Optimized Route&lt;/h2&gt;
&lt;p&gt;I’ll now walk through my theoretical maximum. There are probably further
improvements to be made, including niche mechanics like deflecting bullets with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Katana&lt;/code&gt;, but this will cover what I believe are the intentionally designed
improvements.&lt;/p&gt;

&lt;p&gt;Throughout the game, many of these discovered optimizations are, in reality,
baked into the level and hidden for the player to explore within their
attempts. This keeps levels exciting and encourages the player to find shortcuts
of their own. Let’s see what I found:&lt;/p&gt;

&lt;h3 id=&quot;through-the-looking-glass&quot;&gt;Through the Looking Glass&lt;/h3&gt;
&lt;p&gt;The first key route improvement is made once the player realizes that the
foliage-covered windows near the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; are actually open for you to
jump out of. This enables you to shoot the two Laser Traps you otherwise would
have dodged, then hop out the window onto some well-placed water paths.&lt;/p&gt;

&lt;p&gt;One problem remains, though: the Laser Trap and demon below. Luckily, since the
player didn’t use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; on a door, they can deal with the trap from a
distance with a well-placed shot.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-sniper-shortcut-1.jpg&quot; alt=&quot;Just beyond the window of the first section, gazing out at the next part of the level.&quot; /&gt;
  &lt;figcaption&gt;
    A view from just beyond the windows. The Laser Trap and demon are visible
    for the last shot before moving onto dealing with the Godspeed demon.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Note that each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; card has four bullets, so the player is challenged to
shoot each of the three Laser Traps with accuracy, since they’ll need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt;
to cross a gap later in the route. The first section has been crafted to enable
the player to smuggle out a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; card but also with speed.&lt;/p&gt;

&lt;h3 id=&quot;bypassing-the-elevate-room&quot;&gt;Bypassing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevate&lt;/code&gt; Room&lt;/h3&gt;
&lt;p&gt;They’ll then swap back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Katana&lt;/code&gt; to destroy the Laser Traps and killing the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt; demon, just like in the other path. With a second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Godspeed&lt;/code&gt;, in
hand, we have the ability to dash twice, jumping over the gap and skipping the
next room – but just like with the first shortcut, we have to figure out how to
destroy the demons we’re avoiding.&lt;/p&gt;

&lt;p&gt;In this case, we can consider the fact that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevate&lt;/code&gt; room only had a Laser
Trap chain. As a result, we can clear the room with just a single shot through
the window. Again, the player is given the choice to discover how they may
optimize the route, but many of these are built into the level’s design.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-sniper-shortcut-2.jpg&quot; alt=&quot;The target inside of the elevate room&quot; /&gt;
  &lt;figcaption&gt;
    With two Godspeeds in hand, the player can dash over the gap to their
    right. But first, they'll need to target the Laser Trap chain inside.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We then continue on the same waterfall path – killing a few demons – until we
end up at the intersection with the game’s mystical Hand, hinting us towards a
shortcut.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-ramp-before-drop.jpg&quot; alt=&quot;The ramp next to the Hand where the player can Slam to the end of the level&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;clearing-your-heads&quot;&gt;Clearing Your Heads&lt;/h3&gt;
&lt;p&gt;This is the game-hinted optimization, noted by the Hand in the diagram and
screenshot.  In good form, the hint shows you &lt;em&gt;where&lt;/em&gt; to go but not how to get
there. In this case, touching the hint shows the player they can immediately
drop onto the goal to complete the level.&lt;/p&gt;

&lt;p&gt;Examining the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Purify&lt;/code&gt;s in our hand, it’s a relatively quick jump to think
of discarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Purify&lt;/code&gt; to destroy clusters of enemies, rather than to break down
doors. With the windows into each room, the player can fire each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Purify&lt;/code&gt; to
deal with a group of a Head demon, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stomp&lt;/code&gt; demon, and Laser Trap chain.&lt;/p&gt;

&lt;p&gt;Then, using the remaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stomp&lt;/code&gt;, it’s a quick rush to the end, with the
shockwave cleaning up the last demons at the end of the level very nicely.
Here’s a final diagram of the path:&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;a href=&quot;/assets/img/neon-white/hanging-gardens-fast-path.png&quot;&gt;
    &lt;img src=&quot;/assets/img/neon-white/hanging-gardens-fast-path.png&quot; alt=&quot;My optimized path through the level&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;The layout of the level further cements the idea that specific sections are
unable to be cut out (like most of the waterfall path sections) while other
parts of the level, with their clustered demons or Laser Trap chains, are
designed to be dealt with quickly.&lt;/p&gt;

&lt;h2 id=&quot;final-analysis&quot;&gt;Final Analysis&lt;/h2&gt;
&lt;p&gt;Hopefully, from this walkthrough of a single level, it’s apparent the careful
craft that was put into the feel of &lt;em&gt;Neon White&lt;/em&gt;’s exploration and optimization.&lt;/p&gt;

&lt;p&gt;Each mission feels fast and fun from start to finish, yet after taking a closer
look at each level, players will be rewarded with hidden paths and alternate
ways to deal with the same challenges.&lt;/p&gt;

&lt;h3 id=&quot;decision-tree&quot;&gt;Decision Tree&lt;/h3&gt;
&lt;p&gt;Here is an (albeit too detailed) decision tree of the path through the level.
There are likely other options missing, but it is enough to illustrate my
point that many optimizations are sectioned off. So, when playing each level,
these “Aha!” moments happens in different places and a different order based on
what’s discovered first.&lt;/p&gt;

&lt;script type=&quot;module&quot;&gt;import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';mermaid.initialize({startOnLoad: true,theme: 'dark'});&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD
    1[Katana Laser Trap&lt;br /&gt;Use Godspeed on Laser Traps]
    1--&amp;gt;2a[Discard Godspeed through door&lt;br /&gt;Use Katana on Laser Trap, killing demon]
    1-.-&amp;gt;2b[Jump out window&lt;br /&gt;Shoot Laser Trap, killing demon]
    2a--&amp;gt;3
    2b-.-&amp;gt;3[Use Katana on Laser Traps, killing demon]
    3--&amp;gt;4a[Discard Godspeed through door&lt;br /&gt;Use Elevate on Laser Traps, then discard]
    3-.-&amp;gt;4b[Use Godspeed on Laser Trap chain&lt;br /&gt;Discard Godspeeds to reach platform]
    4a--&amp;gt;5
    4b-.-&amp;gt;5[Use Katana on Laser Traps, killing demons&lt;br /&gt;Discard Stomp, killing demon]
    5--&amp;gt;6a[Discard Purify through door&lt;br /&gt;Discard Purify and Stomp, killing demons]
    5-.-&amp;gt;6b[&quot;Discard Purify, killing room of demons (x2)&quot;]
    6a--&amp;gt;7
    6b-.-&amp;gt;7[Discard Stomp, killing demons below&lt;br /&gt;Finish!]
&lt;/div&gt;

&lt;p&gt;There is already a push towards speedrunning with the game’s medal system as
well as Gold/Platinum medal requirements for some story progression. But
designing quicker paths in the level to be discovered by players makes exploring
exiting.&lt;/p&gt;

&lt;p&gt;And this is why the game is so much fun. It’s feels amazing to rush through
levels quickly with the weapon cards’ playful movement abities (especially with
the clubby soundtrack by Machine Girl), but then, players will be encouraged by
the built-in shortcuts they find to each level and be inspired to find shortcuts
of their own!&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Neon White&lt;/em&gt; makes for an excellent speedrunner – especially to those new to
the scene – by adopting the concepts of optimization and exploration. The
levels are designed to be mastered many times over, as players discover new,
shorter routes.&lt;/p&gt;

&lt;p&gt;Exceptional amounts of these shortcuts are carefully placed into each level, as
we saw in &lt;em&gt;Covenant: Hanging Gardens&lt;/em&gt;. Demons are often clustered together or
made to be dealt with in an entirely different way than the “standard” route.&lt;/p&gt;

&lt;p&gt;The continuous cycle of exploration and optimization makes it so players can’t
help but want to try and improve their time. There’s always something new to
explore in each level as you perfect your theoretical best path.&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Video Games" /><category term="shooter" /><category term="speed-running" /><summary type="html">Join me on a closer look at a level and see how it naturally encourages speedrunning and optimization.</summary></entry><entry><title type="html">My Top Single-Player Video Game of each Year</title><link href="https://carsonboden.com/video%20games/2023/01/01/my-top-single-player-games.html" rel="alternate" type="text/html" title="My Top Single-Player Video Game of each Year" /><published>2023-01-01T00:00:00-08:00</published><updated>2023-04-06T20:22:15-07:00</updated><id>https://carsonboden.com/video%20games/2023/01/01/my-top-single-player-games</id><content type="html" xml:base="https://carsonboden.com/video%20games/2023/01/01/my-top-single-player-games.html">&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/game-of-the-year-splash.png&quot; alt=&quot;Game of the Year splash&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I was recently looking through my library and was surprised how many years
had passed since some of my favorite games were released. Many people are always
focused on new titles – which makes sense, as fresh technology and ideas will
deliver new experiences, building off of the learned techniques of the past –
but I wanted to highlight some &lt;em&gt;slightly&lt;/em&gt; older games that were prime at their
release and might be worth revisiting.&lt;/p&gt;

&lt;p&gt;This list will include some of my favorite titles, by year, mostly as a
personal artifact of my experience, but also a log of how the industry has
changed. Worth calling out that I’m listing these games based on the year &lt;em&gt;I&lt;/em&gt;
played them, not when they were actually released.&lt;/p&gt;

&lt;p&gt;I think it’s also worth mentioning I see these as &lt;em&gt;noteworthy&lt;/em&gt; games, not
necessarily the &lt;em&gt;best&lt;/em&gt; games; most titles are doing something new in the genre /
space, even if execution isn’t perfect.&lt;/p&gt;

&lt;p&gt;To me, it makes sense “spiritually” for this to be released (and updated) at the
turn of the year, so I’m listing that as the release date. Without further ado,
here are the games:&lt;/p&gt;

&lt;h2 id=&quot;the-games&quot;&gt;The Games&lt;/h2&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/the-stanley-parable-splash.jpg&quot; alt=&quot;The Stanley Parable splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2014-the-stanley-parable&quot;&gt;2014: The Stanley Parable&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;17 Oct 2013&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Galactic Cafe&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Galactic Cafe&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;The Stanley Parable&lt;/em&gt; was, for many reasons, one of the major breakthrough games
in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Adventure_game#Walking_simulators&quot;&gt;walking simulator
genre&lt;/a&gt;. While
the &lt;em&gt;gameplay&lt;/em&gt; mechanics are only a light series of choices the player makes on
their adventure, the &lt;em&gt;narrative&lt;/em&gt; mechanics are witty and respond to the players
actions. This is a slight departure from previous games in the genre, like
&lt;em&gt;Myst&lt;/em&gt;, which instead focus almost entirely on puzzle-solving.&lt;/p&gt;

&lt;p&gt;As a result, the game encourages you to play through it multiple times to
experience the outcome of your choices, especially ones you might not otherwise
have made. These stories then end in a variety of absurd ways from stopping a
mind control device puppeteering everyone in the office to realizing the whole
thing was all a dream.&lt;/p&gt;

&lt;p&gt;When I first played through the game, the strange mechanics really stuck with
me. In particular, it felt unlike so many other games, due to the focus on
narrative, environment, and player interaction rather than novel gameplay
mechanics.&lt;/p&gt;

&lt;p&gt;While true, walking simulators can be a slog with poor pacing, &lt;em&gt;The Stanley
Parable&lt;/em&gt;’s eclectic variety of plotlines make discovering a new ending something
players will want to pursue as each is distinct from the rest.&lt;/p&gt;

&lt;p&gt;We can see this trend of variety as a means of enticing the player used by
walking simulators released since. &lt;em&gt;Firewatch&lt;/em&gt;, for example, involves the
protagonist frequently communicating via walkie talkie with a narrator-like,
secondary character that responds to your actions, much like the Narrator in
&lt;em&gt;The Stanley Parable&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center half&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/firewatch-walkie-talkie.jpg&quot; alt=&quot;The protagonist of Firewatch chatting with the narrator over walkie talkie.&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/what-remains-of-edith-finch-fish.png&quot; alt=&quot;The fish-cutting story from What Remains of Edith Finch.&quot; /&gt;
  &lt;figcaption&gt;
    The games above, &lt;em&gt;Firewatch (left)&lt;/em&gt; and &lt;em&gt;What Remains of Edith
    Finch (right)&lt;/em&gt; use similar ideas of narrative-gameplay coupling as in
    &lt;em&gt;The Stanley Parable&lt;/em&gt;.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Similarly, &lt;em&gt;What Remains of Edith Finch&lt;/em&gt; contains a wide variety of disparate
experiences as the player learns about the history of each member of the family.
The interaction with the environment changes and feels tightly bound with the
narrative, creating a satisfying “Aha!” moment for both solving the puzzle &lt;em&gt;and&lt;/em&gt;
uncovering new details within the story.&lt;/p&gt;

&lt;p&gt;By coupling the narrative experience more tightly to the gameplay via responsive
narration and impactful player choice, &lt;em&gt;The Stanley Parable&lt;/em&gt; set the stage for
the future of walking simulators and will remain a foundational piece in my
video game repertoire.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/fez-splash.jpg&quot; alt=&quot;Fez splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2015-fez&quot;&gt;2015: Fez&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1 May 2013 &lt;em&gt;(PC)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Polytron Corporation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Trapdoor&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Despite some of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fez_(video_game)#Canceled_sequel&quot;&gt;controversy around the release of the game and cancellation
of the sequel&lt;/a&gt;,
&lt;em&gt;Fez&lt;/em&gt; caught my eye due to it’s novel, hybrid 2D / 3D technology, cryptic
puzzles, and player-driven exploration and discovery. While completionists may
be taken aback by how extremely detailed and arcane the solutions to certain
puzzles are, the game allows players with a variety of experience to reach a
satisfying ending.&lt;/p&gt;

&lt;p&gt;Some added context, for those who haven’t played (spoilers abound!): &lt;em&gt;Fez&lt;/em&gt; is a
puzzle platformer with a front-loaded focus on platforming and a back-loaded
focus on puzzling. Players explore a detailed, 2D, pixel world using the
protagonist’s ability to “rotate” the map between four “sides” of a 3D cube to
change the location and orientation of platforms, secrets, or even the player.&lt;/p&gt;

&lt;p&gt;The goal is to collect 32 cubes which will fuse together to fix the “glitch”
that gave the protagonist, Gomez, the ability to rotate the world in the first
place. However, while collecting 32 cubes is enough to beat the game, there is
&lt;em&gt;another&lt;/em&gt; set of 32 cubes, called anti-cubes, which are more difficult to find.&lt;/p&gt;

&lt;p&gt;Realistically, anyone who beats the game will likely discover a few anti-cubes
along the way, leaving some loose ends to explore further. This sort of scaling
difficulty is what makes an esoteric game like &lt;em&gt;Fez&lt;/em&gt; appeal to a wider audience:
some will finish the game and call it there, while others will be intrigued by
the anti-cubes and explore the depths of the game.&lt;/p&gt;

&lt;p&gt;And there’s a &lt;em&gt;lot&lt;/em&gt; of depth. The game itself has &lt;strong&gt;&lt;em&gt;two&lt;/em&gt;&lt;/strong&gt; distinct languages
that the player must decode to solve puzzles. The first is more straightforward:
A series of &lt;a href=&quot;https://en.wikipedia.org/wiki/Tetromino&quot;&gt;tetrominos&lt;/a&gt; which instruct
the player to perform specific inputs (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Up&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Down&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;align-center half&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/fez-tetromino.jpg&quot; alt=&quot;A block with a tetromino, from Fez.&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/fez-zu-language.png&quot; alt=&quot;A block with symbols from the Zu language, from Fez.&quot; /&gt;
  &lt;figcaption&gt;
    Players looking to uncover all of the secrets of &lt;em&gt;Fez&lt;/em&gt; must learn to
    decode both the Tetromino symbols &lt;em&gt;(left)&lt;/em&gt; and the Zu language
    &lt;em&gt;(right)&lt;/em&gt;.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The other language, referred to as “Zu”, is effectively a &lt;a href=&quot;https://en.wikipedia.org/wiki/Dingbat&quot;&gt;Dingbat
font&lt;/a&gt;, where traditional, alphabet
characters are replaced by symbols. The player can, over the course of the game,
find rooms that clue them into the real letters associated with each symbol.
From there, decoding messages just takes some pen, paper, and the discovered
translations.&lt;/p&gt;

&lt;p&gt;By its conclusion, players will feel &lt;em&gt;Fez&lt;/em&gt; evolve from an exploratory
platforming game, with lots of fresh ideas due to the 2D-3D mechanics, to an
enigmatic puzzler, detailed enough to require handwritten notes. While other
indie platformers like &lt;em&gt;Braid&lt;/em&gt; or &lt;em&gt;Celeste&lt;/em&gt; capture one side of the formula,
it’s rare to see a game excel in multiple fields.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/undertale-splash.png&quot; alt=&quot;Undertale splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2016-undertale&quot;&gt;2016: Undertale&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;15 Sep 2015&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Toby Fox&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Toby Fox&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Undertale&lt;/em&gt; is a difficult game to describe without playing it. A large part of
the experience is based on subverting the typical expectations from JRPG titles,
like &lt;em&gt;Earthbound&lt;/em&gt;, which it was inspired by.&lt;/p&gt;

&lt;p&gt;Players are offered the choice to play through the game either using the
(intentionally) lackluster combat mechanics to defeat enemies, where they use a
single type of attack to deal damage. Or they can learn how to befriend enemies,
finishing combat via “mercy”.&lt;/p&gt;

&lt;p&gt;The pacifist mechanic expands upon the games narrative-driven experience,
allowing the player to learn more about common enemies or even bosses like
now-famous Papyrus and Sans. But what drew me to the game is that the player is
always offered the &lt;em&gt;choice&lt;/em&gt; to follow up on these experiences. Someone looking
to min-max the game might kill off each character in combat, wondering what all
of the hype was about.&lt;/p&gt;

&lt;p&gt;Of course, the player’s main guide at the beginning, Toriel, teaches the player
how to &lt;em&gt;actually&lt;/em&gt; play the game, by letting them know they shouldn’t try to harm
the creatures of Undertale. But it’s not unreasonable that a player might ignore
that approach as, initially, it also seems fairly dull.&lt;/p&gt;

&lt;p&gt;Ultimately, &lt;em&gt;Undertale&lt;/em&gt; is a game that requires players to get invested in its
world to really appreciate the game. The goofy humor and heartfelt characters
may draw many players in, though I’ve also seen players try to rush through the
game like a standard JRPG, missing &lt;em&gt;Undertale&lt;/em&gt;’s “true nature” and some of the
great moments along the way. It’s hard to capture the humor and love put into
this game, so I’d recommend trying it yourself.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/the-witness-splash.jpg&quot; alt=&quot;The Witness splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2017-the-witness&quot;&gt;2017: The Witness&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;26 Jan 2016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Thekla, Inc.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Thekla, Inc.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The Witness is one of my favorite puzzle games because it encapsulates the
feeling of discovery using its language-less explanation of puzzles and
concepts. The simple, “draw a line” puzzle mechanic is remixed in dozens of
unique ways with each mechanic able to give players that “Aha!” moment.&lt;/p&gt;

&lt;p&gt;Early in the game, the puzzles are tight and straightforward, giving players the
ability to experiment and figure out how new symbols influence the answer to
each of the solvable panels throughout the island. As the puzzles increase in
difficulty, those ideas may be challenged, forcing players to reconsider if the
symbol actually means what they previously assumed.&lt;/p&gt;

&lt;figure class=&quot;align-center half&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/the-witness-puzzle-easy.jpg&quot; alt=&quot;An easier, starting puzzle from The Witness.&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/the-witness-puzzle-hard.jpg&quot; alt=&quot;A more difficult puzzle from The Witness.&quot; /&gt;
  &lt;figcaption&gt;
    The puzzles in &lt;em&gt;The Witness&lt;/em&gt; start simple and are well-bounded so
    players can expiriment and come to a solution. Later puzzles have an
    expanded amount of possible state, ensuring players prove they understand a
    concept.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;By the end of &lt;em&gt;The Witness&lt;/em&gt;, symbols are combined into new puzzles with further
expanded state. To complete some of the game’s final puzzles, players must prove
they understand the intricacies of each mechanic – and it would be almost
impossible to give the correct answer without having that understanding due to
their size.&lt;/p&gt;

&lt;p&gt;From a technological perspective, the game is also quite impressive. It runs on
a custom engine which enables the game to be played on iOS (though I wouldn’t
recommend it). There was also substantial work done to &lt;a href=&quot;https://web.archive.org/web/20120108064326/http://www.gamasutra.com/view/news/39338/Indepth_Concurrent_World_Editing_On_The_Cheap.php&quot;&gt;combine levels into a
single zone that could also be independently edited within version control&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like &lt;em&gt;Fez&lt;/em&gt;, there’s lots of stages of completion to the game. The player only
needs to activate eight of the eleven lasers to reach the end, though even after
completing the three additional levels, there are still hundreds of puzzles left
to find, hidden all over the island. Years later, there’s still more I haven’t
found in &lt;em&gt;The Witness&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/doki-doki-literature-club-splash.jpg&quot; alt=&quot;Doki Doki Literature Club splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2018-doki-doki-literature-club&quot;&gt;2018: Doki Doki Literature Club&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;22 Sep 2017&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Team Salvato&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Team Salvato&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This is one of the strangest games I’ve played. Before spoiling anything, I want
to call out that &lt;a href=&quot;https://ddlc.moe/&quot;&gt;the game is free&lt;/a&gt; and a fairly short (~4
hour) experience. I would recommend against reading into spoilers about the
game, though be warned there is some graphic self-harm content (which will be
very &lt;em&gt;not&lt;/em&gt; obvious from the vibe of the game).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Doki Doki&lt;/em&gt; can be a hard game to talk about, since the game is a meta-heavy
experience with multiple plots:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The Plot&lt;/strong&gt;: The story that happens to the characters as part of the visual
  novel game. The protagonist joins a high school literature club and writes
  poems in a thinly-veiled dating sim.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Meta Plot&lt;/strong&gt;: The story that occurs between playthroughs of the game.
  Monika, the club’s leader (but not an option in the dating sim) gains
  sentinence and modifies the game’s code to profess her love for the
  &lt;em&gt;human player&lt;/em&gt; of the game.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The plot follows all the tropes of a visual novel. The poems you write are
clearly meant to reflect the objectified character traits of the different love
interests in the club. Your childhood friend professes her love to the
protagonist on the first day of the game. The game’s assets are polished and
hide the game’s horror/thriller meta-plot nicely inside of a cutesy anime game.&lt;/p&gt;

&lt;p&gt;The meta plot shows the destructive nature of obsession and our flaws. The
characters in the game are manipulated by Monika to showcase the extremes of
their negative traits, poisoning the relationships the player forms during the
visual novel. They’re eventually driven to killing themselves or deleted by
Monika until she’s the only option remaining. In a way, the dating sim shell
still did what is was meant to do – romance the player – but in a creepy twist
on the genre.&lt;/p&gt;

&lt;p&gt;To me, this game is noteworthy since its such a labor of love; it feels like it
shouldn’t exist. A free, visual-novel game where you learn – via playing the
extremely well-produced shell – that one of the personas is killing the others
in order to be your favorite? Weird, fresh, and I’m there.&lt;/p&gt;

&lt;p&gt;Since playing, they have released a “Plus” version of the game with additional
storylines and endings, though I haven’t tried it yet. I’m not sure how much
would be modified from the main story (or how they’d make certain mechanics work
on the Switch, for example) but perhaps it’s worth revisiting after my trip here
down memory lane.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/return-of-the-obra-dinn-splash.jpg&quot; alt=&quot;Return of the Obra Dinn splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2019-return-of-the-obra-dinn&quot;&gt;2019: Return of the Obra Dinn&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;18 Oct 2019 &lt;em&gt;(Switch)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Lucas Pope&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;3909 LLC&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Good detective games can be hard to find. Designers must work to balance the
game so that it isn’t too hard to find important clues or uncover the mystery
while still enabling player expression and keeping the joy of discovery.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Return of the Obra Dinn&lt;/em&gt; accomplishes this using an expanding tome of
identities that the player fills in to denote which characters have perished, by
what means, and who (if anyone) killed them. The book will inform the player
they’re correct only when three identities are &lt;em&gt;completely&lt;/em&gt; filled in (identity,
means of death, and adversary). This ensures players are actually paying
attention and filling things in while they go, but also allows some guesswork to
help pave the way.&lt;/p&gt;

&lt;p&gt;In addition to the mystery of deaths aboard the Obra Dinn, there are also
other-worldly forces at work that make the in-game lore more interesting to
explore.&lt;/p&gt;

&lt;p&gt;For example, one of the the mermaids’ shells can be seen from the ship, even
from the start (though the player will have to deduce this sparkling talisman
throughout the story). Even aspects of the Momento Mori, the pocketwatch which
allows players to see into the snapshots of the past, has consistent rules it
follows, further revealed by the storyline with the monkeypaw, which illustrates
how a remnant of the deceased is required to look back at the moment they died.&lt;/p&gt;

&lt;p&gt;To me, &lt;em&gt;Obra Dinn&lt;/em&gt; is a modern take on the detective game formula. There are
innovative ways of enabling player expression (especially for the deceased who
don’t have dedicated diorama entries for their demise) while also some in-game
mysteries to explore, like how the mystical pocket watch enables your
investigation. I’ve recently also enjoyed &lt;em&gt;Case of the Golden Idol&lt;/em&gt; which uses
similar mechanics and inner-world mysteries to drive an impressive,
snapshot-based experience.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/disco-elysium-splash.jpg&quot; alt=&quot;Disco Elysium splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2020-disco-elysium&quot;&gt;2020: Disco Elysium&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;15 Oct 2019&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;ZA/UM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;ZA/UM&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Disco Elysium&lt;/em&gt; takes players back to old-school, 1.5-dimension, dice-based RPGs
– like the first couple &lt;em&gt;Fallout&lt;/em&gt; games or &lt;em&gt;Divinity&lt;/em&gt; – but with a fervent
focus on witty dialogue and political discourse over high-octance combat and
expendable characters. The result is a surreal, though grounded story, with over
6,000 years of in-game folk history using a creative way of divulging player
information to keep replays interesting.&lt;/p&gt;

&lt;p&gt;I have many accolades for &lt;em&gt;Disco Elysium&lt;/em&gt;, but I should also be upfront that it
involves reading. A &lt;strong&gt;lot&lt;/strong&gt; of reading. The
(&lt;a href=&quot;https://www.rockpapershotgun.com/disco-elysium-has-added-full-voice-acting-and-new-quests-in-the-final-cut-update&quot;&gt;now-completely&lt;/a&gt;)
voice acted script gives characters gravitas and some extra legs to the
slow-burning plot, but you’ll still need to pay attention to the dialogue and
probably won’t like this game much if you have an aversion to reading.&lt;/p&gt;

&lt;p&gt;The reward, though, for taking the patience to read through the experience is a
tightly-knit web of stories, interconnected and built up by small choices made
by the player. The protagonist – a dilapidated drunk – has amnesia, giving
players the ability to make choices on their own, while your partner, Kim
Kitsuragi, tries to keep the case progress roughly on track. Along the way, the
protagonist will learn more about their own history while digging into the
identities of a variety of characters in the game’s alternative-reality,
post-Communist revolution city of Revachol.&lt;/p&gt;

&lt;p&gt;From a mechanics perspective, it’s clear that the game was developed as an
extension of classic tabletop RPGs. Skill checks involve some player stat being
added to a roll of two six-sided dice with the minimum roll – regardless of
added bonus – being an automatic fail while the maximum is an automatic
success! This makes &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; skill attempt possible, though in order to repeat
a failed attempt, players must level up the corresponding skill.&lt;/p&gt;

&lt;p&gt;The skills are also woven into the experience via in-game personalities. Each
skill is a voice, talking to the protagonist (or sometimes, to each other) from
inside his head. They also typically only chime in when passing a corresponding
skill check, meaning missed checks are often hidden from the player. This allows
for a lot of hidden replayability, as scenes in the game may have a completely
new direction if you’re more in-tune with the drug-addicted side of the
protagonist rather than the detective-oriented one.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/disco-elysium-skill-chat.jpg&quot; alt=&quot;Speaking with the Suggestion skill during a conversation in Disco Elysium&quot; /&gt;
  &lt;figcaption&gt;
    The &lt;b&gt;Inland Empire&lt;/b&gt; and &lt;b&gt;Suggestion&lt;/b&gt; skills (and even my neck
    tie!) chime in to give extra insight to a conversation with some drunkards
    in Revachol.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The core choices of &lt;em&gt;Disco Elysium&lt;/em&gt; come from the conversations in your head and
with the characters of the city. The player will frequently be forced to defend
their actions via historically-reimagined, ideological equivalents (often
with the same name) like communism or neoliberalism. However, the conversational
adversaries may not always be swayed by the same arguments or players may not be
able to use certain ideologies to defend specific actions.&lt;/p&gt;

&lt;p&gt;Throughout a playthrough, the game then analyzes which ideology you “truly”
believe in – based on your responses – and can insert new options into
dialogue, encouraging the player to commit to a belief. While this may not be
the radical, story-altering experience some choice-enthusiasts will salivate
over, the choices feel “deeper” in that they permeate throughout most of the
game.&lt;/p&gt;

&lt;p&gt;The mystery the player begins solving at the start is no longer a focal point.
Instead, the player might be focused on how they can convince everyone of their
political agenda, or the variety of uncoverable intrigue plots: Who killed the
old head of the Union? Where is the red-haired woman from the motel? What turned
the protagonist from heroic detective to dreary-eyed, degenerate drug user?&lt;/p&gt;

&lt;p&gt;If you want the answers, you’ll have to play the game and see what &lt;em&gt;your&lt;/em&gt;
version of the events look like!&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/inscryption-splash.jpg&quot; alt=&quot;Inscryption splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2021-inscryption&quot;&gt;2021: Inscryption&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;19 Oct 2021 &lt;em&gt;(PC)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Daniel Mullins Games&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Devolver Digital&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Like &lt;em&gt;Undertale&lt;/em&gt;, &lt;em&gt;Inscryption&lt;/em&gt; is a hard gave to discuss in words alone.
Partially because of the excessive amount of spoilers, though also in part
because so much of the experience felt like it &lt;em&gt;needed&lt;/em&gt; to be told in video game
format, which is common for some of Dan Mullins’ other games like &lt;em&gt;Pony Island&lt;/em&gt;
and &lt;em&gt;The Hex&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I would describe the game (spoiler free) as a roguelite deck-builder with some
escape room elements thrown in. The cards in your deck talk to you as the player
(sometimes even calling out your misplays) and give you hints to progress in
both the micro-level cardgame and the macro-level “room” you must escape from.&lt;/p&gt;

&lt;p&gt;To avoid any major spoilers, I’ll instead focus on the character design of the
game’s three main bosses: &lt;strong&gt;The Trapper&lt;/strong&gt;, &lt;strong&gt;The Angler&lt;/strong&gt;, and &lt;strong&gt;The
Prospector&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;align-center third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/inscryption-mask-trapper.jpg&quot; alt=&quot;The Trapper, from Inscryption&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/inscryption-mask-angler.webp&quot; alt=&quot;The Angler, from Inscryption&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/inscryption-mask-prospector.webp&quot; alt=&quot;The Prospector, from Inscryption&quot; /&gt;
  &lt;figcaption&gt;The masks of the three core bosses.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The first boss, &lt;strong&gt;The Trapper&lt;/strong&gt;, the player will have already met during their
adventure. Pelt cards can be purchased (as a random event) from &lt;strong&gt;The Trapper&lt;/strong&gt;
and sold to &lt;strong&gt;The Trader&lt;/strong&gt; for strong cards at the short-term cost of adding the
“useless” pelts in your deck.&lt;/p&gt;

&lt;p&gt;As the player sees when facing off versus &lt;strong&gt;The Trapper&lt;/strong&gt;, those pelts can
&lt;em&gt;also&lt;/em&gt; be used to remove enemy cards from the board. This is because, as
revealed during the battle, &lt;strong&gt;The Trader&lt;/strong&gt; is the same person – they even use
the same upside-down mask! The pelt mechanic is well-designed for the first
boss, since the player will already be aware of the existing mechanic but can
now consider this twist for future runs. Maybe it’s worth keeping a pelt in the
deck to use for the boss battle?&lt;/p&gt;

&lt;p&gt;Next we have &lt;strong&gt;The Angler&lt;/strong&gt;, an almost monsterous humanoid that frequently
states, “Go fish” before using their signature hook to steal the
most recently-played player card. Aside from a great pun, players will also have
to watch out for the hook and play their cards carefully, always following up a
strong card with a weak one that can afford to be hooked. While most of the
battle is otherwise straightforward, a two-card swing is a big obstacle to
constantly overcome when battling &lt;strong&gt;The Angler&lt;/strong&gt;, forcing fresh decisions,
regardless of the deck.&lt;/p&gt;

&lt;p&gt;Finally, &lt;strong&gt;The Prospector&lt;/strong&gt; is, in my opinion, the most difficult boss as he
uses his pickaxe to immediately destroy your played cards (before following up
with a powerful Bloodhound card). To counteract this, he also starts with a Pack
Mule card in play that the player will want to quickly target, as it is chock
full of cards to replenish your arsenal after it’s turned to gold by &lt;strong&gt;The
Prospector&lt;/strong&gt;’s axe.&lt;/p&gt;

&lt;p&gt;Each boss requires the player to win two rounds (instead of the traditional one)
and will follow-up with a powerful play after their first life is lost. This
makes the game feel swingy and satisfying to defeat a boss that has just
recently wiped your entire board.&lt;/p&gt;

&lt;p&gt;As my short description above demonstrates, the game has put in the work to
create an enticing, replayable deck builder. And I didn’t even touch on the
escape room antics and class, Dan Mullins’ meta-narrative! I would recommend
this game spoiler-free, though find that the mechanics carry the game, even if
you’re aware of the narrative.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/neon-white-splash.jpg&quot; alt=&quot;Neon White splash art&quot; /&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;2022-neon-white&quot;&gt;2022: Neon White&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;16 Jun 2022 &lt;em&gt;(PC)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Angel Matrix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Annapurna Interactive&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I liked &lt;em&gt;Neon White&lt;/em&gt; a lot and plan to do a full, in-depth review of the game.
I’ve also released an overview of &lt;a href=&quot;https://carsonboden.com/video%20games/2023/03/08/neon-white-level-walkthrough.html&quot;&gt;how it encourages players to
discover shortcuts and “trains” the speedrunning eye&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At a high-level, the game has great-feeling, finely-tuned movement controls and
the performance makes snap-reloading levels (common in speedrunning) seamless.
While the storyline received some criticism for its anime tropes and cringe
dialogue, I felt like some lines were taken out of context and are actually
tongue in cheek.&lt;/p&gt;

&lt;p&gt;I’m hoping friends will continue to pickup the game as I have loved comparing
times.&lt;/p&gt;

&lt;h2 id=&quot;my-reflection&quot;&gt;My Reflection&lt;/h2&gt;
&lt;p&gt;This post took a while to write – more than I expected (I initially started it
as a warm up for my &lt;em&gt;Neon White&lt;/em&gt; review, though that might take even longer).
It was satisfying to take a look at some old favorites and give a quick
shoutout, despite the effort.&lt;/p&gt;

&lt;p&gt;Plus, now that this list exists, I can update it with a much more manageable
game-per-year. Who knows what 2023 will bring? Currently, I’ve got my eye on
&lt;em&gt;Pikmin 4&lt;/em&gt;, Jonathan Blow’s Sokoban-inspired game (if it ever comes out) and
&lt;em&gt;Tunic&lt;/em&gt; (which I haven’t played yet, so it still counts).&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Video Games" /><category term="deck-builder" /><category term="platformer" /><category term="puzzle" /><category term="roguelike" /><category term="rpg" /><category term="shooter" /><category term="speed-running" /><category term="story" /><category term="visual-novel" /><category term="walking-simulator" /><summary type="html">A list and brief synopsis of my most noteworthy from each year, starting from 2014.</summary></entry><entry><title type="html">Automating Deployments with BitBucket / GitHub Pipelines</title><link href="https://carsonboden.com/programming/2022/11/20/automating-deployments.html" rel="alternate" type="text/html" title="Automating Deployments with BitBucket / GitHub Pipelines" /><published>2022-11-20T00:00:00-08:00</published><updated>2022-11-20T15:55:40-08:00</updated><id>https://carsonboden.com/programming/2022/11/20/automating-deployments</id><content type="html" xml:base="https://carsonboden.com/programming/2022/11/20/automating-deployments.html">&lt;p&gt;At work, I’ve recently been splitting our many of our services into their own
repo, migrating from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monorepo&quot;&gt;Monorepo&lt;/a&gt;-style
architecture towards an eventual Multirepo-style future.&lt;/p&gt;

&lt;p&gt;Since my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dotfiles&lt;/code&gt; repo is a Mono, I wanted to take some time to highlight the
differences between the types of repos, how to configure automatic deployments,
and the various challenges between each.&lt;/p&gt;

&lt;h1 id=&quot;overview-and-goals&quot;&gt;Overview and Goals&lt;/h1&gt;
&lt;p&gt;This first section will highlight &lt;em&gt;why&lt;/em&gt; someone might want to use a Multirepo
rather than a Monorepo. I’ll highlight the use case at work compared to my
personal experience with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dotfiles&lt;/code&gt; repo and how each makes sense.&lt;/p&gt;

&lt;p&gt;In addition, we’ll examine how the developer experience is almost identical for
both, despite the differences in repository management.&lt;/p&gt;

&lt;h2 id=&quot;comparing-monorepo-vs-multirepo&quot;&gt;Comparing Monorepo vs. Multirepo&lt;/h2&gt;
&lt;p&gt;Both of these terms are used to compare methods of version-control systems, with
a Monorepo housing multiple different projects or applications and a Multirepo
splitting independent pieces of code into their on VCS.&lt;/p&gt;

&lt;p&gt;Monorepos were first popularized in the early 2000s by tech giants like Google
and Microsoft, though recently the standard has shifted towards the Multirepo
approach. Neither is perfect, though the shift (in my opinion) is largely driven
by the more explicit dependency management and more lightweight management of
individual Multirepos.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/multirepo-vs-monorepo.png&quot; alt=&quot;A comparison between Multirepos and Monorepos&quot; /&gt;
  &lt;figcaption&gt;
    Monorepos contain multiple projects which are otherwise split in a Multirepo
    setup.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A Monorepo is also slightly different from a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monolithic_application&quot;&gt;Monolithic
application&lt;/a&gt;, which
combines each sub-application into one large project. Monorepos can have
multiple independent artifacts, they just live under a single version control.&lt;/p&gt;

&lt;h3 id=&quot;dependency-management&quot;&gt;Dependency Management&lt;/h3&gt;
&lt;p&gt;Since Monorepos (often) use only one version of any dependency, builds can be
easily optimized around the single version in the codebase. However, this can
sometimes be a challenge if breaking changes to an external library affect only
part of the codebase. An upgrade can also be limited if &lt;em&gt;any&lt;/em&gt; code can’t use the
latest version, even if other applications are unaffected.&lt;/p&gt;

&lt;p&gt;By contrast, Multirepos can each use separate versions of their third-party
libraries, though this can bloat builds if each application needs to download
its own version of a dependency. Upgrades can take longer, though, since each
individual repo will need its dependencies to be updated.&lt;/p&gt;

&lt;h3 id=&quot;code-reuse--large-scale-refactoring&quot;&gt;Code Reuse / Large-Scale Refactoring&lt;/h3&gt;
&lt;p&gt;Monorepos can take advantage of common libraries being easily shared across all
sub-projects. It’s also simpler to refactor these libraries, as changes must
propagate across the entire repo in order for the refactor to take effect.&lt;/p&gt;

&lt;p&gt;The downside is that refactors must sweep across the entire codebase to take
effect, while Multirepos can often continue to use old versions of shared
libraries in order to continue using not-yet-refactored code.&lt;/p&gt;

&lt;p&gt;However, the development process for refactors in Multirepos often takes more
time, since they must wait for refactor changes to be published from the
common library before they can start  upgrading their existing users.&lt;/p&gt;

&lt;h3 id=&quot;version-information&quot;&gt;Version Information&lt;/h3&gt;
&lt;p&gt;Many Monorepos use a single version across all projects. This is often required
due to semantic differences updating a Monorepo compared to a Multirepo. For
example, a refactoring to a common library will update all users across the
codebase, so in theory the entire Monorepo has been updated.&lt;/p&gt;

&lt;p&gt;Within a Multirepo, the common library would be refactored and update it’s
version, and then dependent libraries can update &lt;em&gt;their&lt;/em&gt; versions as they use
the latest version of the common library.&lt;/p&gt;

&lt;p&gt;Per-project versions can provide extra value to users, especially with Semantic
Versioning (&lt;a href=&quot;#semantic-versioning&quot;&gt;discussed more below&lt;/a&gt;). Though this can be
lost within a Monorepo if steps are not taken to version sub-modules
independently.&lt;/p&gt;

&lt;h3 id=&quot;collaboration-across-teams&quot;&gt;Collaboration Across Teams&lt;/h3&gt;
&lt;p&gt;Monorepos enable &lt;em&gt;any&lt;/em&gt; teammate to modify &lt;em&gt;any&lt;/em&gt; piece of code. That flexible
code ownership also means teams can improve code “owned” by other teams.&lt;/p&gt;

&lt;p&gt;However, a Monorepo also &lt;em&gt;prevents&lt;/em&gt; anyone from getting restricted access to the
repo. It’s all or nothing, which isn’t ideal in a codebase with hundreds or
thousands of developers.&lt;/p&gt;

&lt;p&gt;A Monorepo also means developers will need to download the entire codebase, even
if they want to make a small, targeted change. When running continuous
integration / deployment pipelines, this can also increase build times since all
dependencies need to be re-built and re-tested, even for just a minor change in
a single application.&lt;/p&gt;

&lt;h2 id=&quot;intended-experience&quot;&gt;Intended Experience&lt;/h2&gt;
&lt;p&gt;Ideally, users of our repos should follow this workflow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Developer pushes code in a feature branch to the repo and opens a pull
request.&lt;/li&gt;
  &lt;li&gt;A CI/CD pipeline is started to verify tests and ensure the code is ready
to be committed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Developer receives approval from a teammate, their build passes, and they
merge their branch.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another pipeline is started on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; to publish those changes:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Tooling marks it as a stable release, and makes a commit to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; with a
matching tag.&lt;/li&gt;
      &lt;li&gt;Latest version of the code is compiled into deployable components.&lt;/li&gt;
      &lt;li&gt;Build artifacts are published to corresponding environments&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Developer deploys the changes, if manual intervention is needed, or it can
otherwise be automatically be deployed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;semantic-versioning&quot;&gt;Semantic Versioning&lt;/h2&gt;
&lt;p&gt;Semantic versioning is a strategy for assigning version numbers to builds of
software in such a way that they can properly carry meaning — specifically,
meaning about how the code changes between versions.&lt;/p&gt;

&lt;p&gt;While versions are by design strictly ordered (and therefore can be used as a
simple sequential version number) they’re most useful for controlling
interactions between components by defining changes as belonging to one of three
categories: major, breaking changes; minor, feature adds; and patches or
bugfixes.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/semantic-versioning.png&quot; alt=&quot;The three number values used within Semantic Versioning.&quot; /&gt;
  &lt;figcaption&gt;
    The three number values used within Semantic Versioning. Image courtesy of
    &lt;a href=&quot;https://devopedia.org/images/article/279/7179.1593248779.png&quot;&gt;
      devopedia.org
    &lt;/a&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Official” documentation is present at &lt;a href=&quot;https://semver.org&quot;&gt;semver.org&lt;/a&gt;, though
usage may differ as the standard is a well-defined set of guidelines more than an
explicit set of rules.&lt;/p&gt;

&lt;h3 id=&quot;version-number-components&quot;&gt;Version Number Components&lt;/h3&gt;
&lt;p&gt;Semantic Version numbers (as a baseline) contain three values, separated by
dots. For example, a valid Semantic Version is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.14.1&lt;/code&gt;. The first value (in
this case, 2) is the “major” version number, the second (14) is the “minor”
version, and the final (1) is the “patch” version.&lt;/p&gt;

&lt;p&gt;Some versions may contain additional information in a suffix, such as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;
commit, though the idea is that the intended &lt;em&gt;code&lt;/em&gt; version is the same.&lt;/p&gt;

&lt;h1 id=&quot;how-to-split-out-a-maven-package&quot;&gt;How to Split Out a Maven Package&lt;/h1&gt;
&lt;p&gt;Migrating an existing Maven package from a Monorepo to a Multirepo can be an
arduous process. This section aims to outline a few helpful steps that can
simplify the process as well as some concepts about Maven that I learned when
doing migrations myself.&lt;/p&gt;

&lt;h2 id=&quot;generating-an-effective-pom&quot;&gt;Generating an Effective POM&lt;/h2&gt;
&lt;p&gt;Maven can generate the initial dependencies for a given package into a POM for
you! This can be a great starting point rather than copy-pasting the existing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; — which likely has more dependencies than you need — or starting from
scratch.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;From IntelliJ, open the context menu (right click, Cmd + click, two-finger
click, etc.) for the package you want, then navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maven &amp;gt; Show Effective
POM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, if you aren’t using IntelliJ, you can create an effective POM
using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:effective-pom&lt;/code&gt; command. &lt;a href=&quot;https://maven.apache.org/plugins/maven-help-plugin/effective-pom-mojo.html&quot;&gt;More about it
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you can copy that file to use as the starting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; for the split-off
package.&lt;/p&gt;

&lt;h2 id=&quot;understanding-how-snapshots-work&quot;&gt;Understanding How SNAPSHOTs Work&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNAPSHOT&lt;/code&gt; suffix on a build version indicates that any built code is
unstable and could change as the latest version is developed. The suffix is
appended to the Semantic Version to provide extra context to any users.&lt;/p&gt;

&lt;p&gt;During a release, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNAPSHOT&lt;/code&gt; suffix is removed (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.14.1-SNAPSHOT&lt;/code&gt;
becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.14.1&lt;/code&gt;) and then the POM is amended to bump up to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNAPSHOT&lt;/code&gt; release
of the next version (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.14.2-SNAPSHOT&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For more information, Apache has &lt;a href=&quot;https://maven.apache.org/guides/getting-started/index.html#What_is_a_SNAPSHOT_version&quot;&gt;a guide to how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SNAPSHOT&lt;/code&gt;s work
here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;connecting-to-bitbucket&quot;&gt;Connecting to BitBucket&lt;/h2&gt;
&lt;p&gt;There’s an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scm&lt;/code&gt; (software configuration management) section in the POM that
let’s us connect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; for specific operations. This is needed within the
BitBucket Pipelines to push out commits or tags with new versions of the code.
Yours should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;scm&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;developerConnection&amp;gt;&lt;/span&gt;scm:git:ssh://git@github.com/cwboden/.dotfiles.git&lt;span class=&quot;nt&quot;&gt;&amp;lt;/developerConnection&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;dotfiles-1.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scm&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;developerConnection&lt;/code&gt; should (mostly) match the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; URI you
get when cloning the repo; just make sure to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scm:&lt;/code&gt; prefix!&lt;/p&gt;

&lt;h2 id=&quot;starting-pipelines-from-prs&quot;&gt;Starting Pipelines from PRs&lt;/h2&gt;
&lt;p&gt;BitBucket won’t let you start running Pipelines until you have a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitbucket-pipelines.yml&lt;/code&gt; file in the root of the repository. Since you’ll want
to test the Pipeline changes before committing them, it can be useful to have a
blank template committed so that pull requests can kick off a Pipeline build.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;From the home page of your repository, navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository Settings &amp;gt;
PIPELINES &amp;gt; Settings&lt;/code&gt; and follow the instructions to enable Pipelines.
BitBucket may help you create a blank template, or you can use a copy from
another repo.&lt;/p&gt;

&lt;p&gt;Now, Pipelines should be enabled and can be run on future pull requests. It’s
worth noting that Pipelines will use the PR’s version of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitbucket-pipelines.yml&lt;/code&gt; and you can run any version of a Pipeline using the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run Pipeline&lt;/code&gt; button on the Pipelines page of the repo.&lt;/p&gt;

&lt;p&gt;For guidance on what a configuration should look like, &lt;a href=&quot;https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/&quot;&gt;their starter
guide&lt;/a&gt;
is nice for building context. You can then look at the bitbucket-pipeline.yaml
files in other repos (or even the GitHub Pipelines file in this repo) for a good
starting point.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-a-builddeploy-infinite-loop&quot;&gt;Avoiding a Build/Deploy Infinite Loop&lt;/h2&gt;
&lt;p&gt;The way Pipelines are configured, we start one on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; anytime a new commit is
made. This works great when we merge in PRs, but since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maven-release&lt;/code&gt;
plugin makes commits &lt;strong&gt;&lt;em&gt;whenever we run the Pipeline&lt;/em&gt;&lt;/strong&gt; to update the package’s
version, you can imagine how that can be a problem.&lt;/p&gt;

&lt;p&gt;By adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[skip ci]&lt;/code&gt; at the start of those commits, we can ensure this doesn’t
happen. Add these lines to the maven-release-plugin section of your POM:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-release-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.5.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Skip JavaDoc processing, since it doesn't support Kotlin code.  --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;arguments&amp;gt;&lt;/span&gt;-Dmaven.javadoc.skip=true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/arguments&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scmCommentPrefix&amp;gt;&lt;/span&gt;[skip ci] [maven]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scmCommentPrefix&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Optionally, you may want to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javadoc&lt;/code&gt; disable option if your code is
having issues building the docs during deployment. If your repo has both Java
and Kotlin, this is likely the case.&lt;/p&gt;

&lt;h1 id=&quot;how-builds-are-configured-within-dotfiles&quot;&gt;How Builds are Configured within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dotfiles&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;My personal repo (this one, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dotfiles&lt;/code&gt;) has a similar developer experience
where merged PRs are immediately deployed to the website after passing a GitHub
pipeline. However, as a Monorepo, there are some differences in why and how it’s
configured.&lt;/p&gt;

&lt;h2 id=&quot;using-a-monorepo-for-personal-development&quot;&gt;Using a Monorepo for Personal Development&lt;/h2&gt;
&lt;p&gt;Since this repo is for my personal projects (and blog), I don’t need many of
the advantages of a Multirepo:&lt;/p&gt;

&lt;p&gt;As the only one touching the code, I don’t have a need to version it, since
there aren’t any consumers. I also don’t need to limit access between
developers, and a Monorepo ensures my wide-sweeping refactors and changes
propagate across the entire codebase.&lt;/p&gt;

&lt;p&gt;And while it would be good practice to split some of my projects into their own
repo, I’d rather save the time I would be spending maintaining the
infrastructure for each repo:&lt;/p&gt;

&lt;p&gt;For example, I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pre-commit&lt;/code&gt; hooks to apply style rules, formatting, and
security checks whenever committing code. It would be expensive to update those
hooks for every single repo whenever I made a change. As a result, I’ve kept
everything important in a Monorepo for easy access.&lt;/p&gt;

&lt;h2 id=&quot;limiting-scope-during-build--test&quot;&gt;Limiting Scope during Build / Test&lt;/h2&gt;
&lt;p&gt;To help pare down build and test times, I’ve taken advantage of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dorny/paths-filter&lt;/code&gt; Workflow action to determine which files have changed.
This snippet highlights the important parts:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;detect-changes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.filter.outputs.bootstrap }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.filter.outputs.python }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rust&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.filter.outputs.rust }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;website&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ steps.filter.outputs.website }}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dorny/paths-filter@v2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;filter&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;python:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;- '*.py'&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;detect-changes&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ needs.detect-changes.outputs.python == 'true' }}&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outputs&lt;/code&gt; section defines variables that can be compared by future steps.
In the above example, we check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; output is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; before running
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; build and test Workflow. There are similar definitions for each
other “application” I have in this repo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rust&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;website&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filters&lt;/code&gt;, we define how to check for changes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;. For the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; output we just see if any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.py&lt;/code&gt; files have changed, though we could
limit this more explicitly if we want to check for changes within a specific
directory or project.&lt;/p&gt;

&lt;p&gt;As a result, GitHub will only run specific Workflows if changes are actually
present. No point running our test suite on a project that hasn’t changed!
(Though be aware of transitive dependencies that won’t be covered by this
approach.)&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/github-workflow-detect-changes.png&quot; alt=&quot;GitHub only runs Workflows when it detects changes.&quot; /&gt;
  &lt;figcaption&gt;
    GitHub only runs Workflows when it detects changes.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In theory, this Workflow could be expanded to update versions of changed
packages accordingly, though I haven’t had a use for versioning just yet.&lt;/p&gt;

&lt;p&gt;For more details about how to use GitHub Workflows, see &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows&quot;&gt;their
documentation&lt;/a&gt;.&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Programming" /><category term="automation" /><category term="infrastructure" /><category term="tools" /><summary type="html">A comparison between Monorepos and Multirepos as well as how each can automate deployments in a seamless fashion.</summary></entry><entry><title type="html">*Air, Land, &amp;amp; Sea*: An Easy to Learn Game with Incredible Depth</title><link href="https://carsonboden.com/board%20games/2022/09/22/air-land-sea.html" rel="alternate" type="text/html" title="*Air, Land, &amp;amp; Sea*: An Easy to Learn Game with Incredible Depth" /><published>2022-09-22T00:00:00-07:00</published><updated>2022-09-22T00:00:00-07:00</updated><id>https://carsonboden.com/board%20games/2022/09/22/air-land-sea</id><content type="html" xml:base="https://carsonboden.com/board%20games/2022/09/22/air-land-sea.html">&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/air-land-and-sea-header.jpg&quot; alt=&quot;The cards, tableaus, and tokens from Air, Land, &amp;amp; Sea.&quot; /&gt;
  &lt;figcaption class=&quot;align-right&quot;&gt;
    Image courtesy of &lt;a href=&quot;https://boardgamequest.com&quot;&gt;boardgamequest.com&lt;/a&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2019&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Jon Perry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Arcane Wonders&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Air, Land, &amp;amp; Sea&lt;/em&gt; is a two-player WWII-themed game where each player is
attempting to control two of the three theaters (Air, Land, or Sea) over a
series of battles until they can declare victory!&lt;/p&gt;

&lt;p&gt;With only 18 cards, the game is deceptively simple at first glace, but the
complexity is built from the order in which you play your cards:&lt;/p&gt;

&lt;p&gt;Cards can be played face-up to their corresponding theater, where they will
trigger a powerful Tactical Ability. However, face-down cards can be played
to &lt;em&gt;any&lt;/em&gt; theater and can later be flipped by other cards to trigger their
ability and provide additional reinforcement to that theater.&lt;/p&gt;

&lt;p&gt;At the start of each battle, players are dealt six cards and will not draw any
more unless specified by a Tactical Ability. To win a theater, a player must
have the most Strength, determined by the large number at the top-left of each
card.&lt;/p&gt;

&lt;h2 id=&quot;withdrawal&quot;&gt;Withdrawal&lt;/h2&gt;
&lt;p&gt;The defining aspect of the game, though, is the ability to withdraw. At any
point (on their turn), an opponent can give up the battle with the hopes of
eventually winning the war.&lt;/p&gt;

&lt;p&gt;Players are incentivized to make this choice, since the opposition will get
fewer points than if playing out the entire hand, based on how many cards are
the surrending party still holds. The table below describes how many points are
earned by the opponent when retreating:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1st Player&lt;br /&gt;&lt;em&gt;(cards)&lt;/em&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2nd Player&lt;br /&gt;&lt;em&gt;(cards)&lt;/em&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4-6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5-6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2-3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3-4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0-1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not only is this extremely thematic, since a calculated retreat will yield more
resources for a future battle, it’s also a good balance to the randomness of
the cards dealt each round. Players who are dealt a bad hand can concede without
feeling a huge loss.&lt;/p&gt;

&lt;p&gt;And it gets better! The real genius in design comes from the tension between
players as they select cards from their hand. Playing strong cards early might
scare off your opponent and award less points. But players can also bluff by
dropping big cards while keeping their smallest cards hidden back in their hand.&lt;/p&gt;

&lt;p&gt;As a result, players have to read their opponents carefully, as in a real war,
in order to determine if their opponent actually &lt;a href=&quot;https://en.wikipedia.org/wiki/Nut_hand&quot;&gt;has the
nuts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s very easy to over-commit to a battle, with all of the fun combos between
cards and machinations you’ve prepared in-hand. But cautious play with constant
re-evaluation of withdrawl is often rewarded.&lt;/p&gt;

&lt;h2 id=&quot;card-analysis&quot;&gt;Card Analysis&lt;/h2&gt;
&lt;p&gt;Below are the 18 different cards included with &lt;em&gt;Air, Land, &amp;amp; Sea&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;#&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Air&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Land&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Sea&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;You gain +3 strength in each adjacent theater.&lt;/td&gt;
      &lt;td&gt;Look at the top card of the battle deck. You may play it face-down to an adjacent theater&lt;/td&gt;
      &lt;td&gt;You may move 1 of your battle cards to a different theater.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;On your next turn, you may play a battle card to a non-matching theater.&lt;/td&gt;
      &lt;td&gt;Flip a battle card in &lt;em&gt;any&lt;/em&gt; theater.&lt;/td&gt;
      &lt;td&gt;All of your face-down battle cards are now strength 4.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Flip a battle card in an adjacent theater.&lt;/td&gt;
      &lt;td&gt;Flip a battle card in an adjacent theater.&lt;/td&gt;
      &lt;td&gt;Flip a battle card in an adjacent theater.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;You may play battle cards of strength 3 or less to non-matching theaters.&lt;/td&gt;
      &lt;td&gt;All battle cards covered by this card are now strength 4.&lt;/td&gt;
      &lt;td&gt;Return 1 of your face-down battle cards to your hand. If you do, gain an extra turn.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;If either player plays a battle card face-down, immediately discard that card.&lt;/td&gt;
      &lt;td&gt;Your opponent chooses and flips 1 of their battle cards. Then you flip 1 of yours.&lt;/td&gt;
      &lt;td&gt;If a battle card is played in an adjacent theater with 3 or more cards already in it (counting both players’ cards), discard that card with no effect.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;(none, high card)&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;(none, high card)&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;(none, high card)&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When you consider that all of the 3s and 6s are the same, there are really only
12 unique cards, plus the three 3s and three 6s. But, much like Seiji Kanai’s
&lt;a href=&quot;https://boardgamegeek.com/boardgame/129622/love-letter&quot;&gt;Love Letter&lt;/a&gt;, there’s
an impressive amount of depth packed into in a small, portable deck.&lt;/p&gt;

&lt;p&gt;I’m not going to be giving an in-depth analysis of &lt;em&gt;every&lt;/em&gt; card in the game, but
there are some favorites that I want to highlight:&lt;/p&gt;

&lt;figure class=&quot;align-right third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/air-land-and-sea-containment.png&quot; alt=&quot;Air, Land, &amp;amp; Sea: Containment Card Art&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/air-land-and-sea-cover-fire.jpg&quot; alt=&quot;Air, Land, &amp;amp; Sea: Cover Fire Card Art&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/air-land-and-sea-escalation.jpg&quot; alt=&quot;Air, Land, &amp;amp; Sea: Escalation Card Art&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;containment&quot;&gt;Containment&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Strength:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Effect:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;If either player plays a battle card face-down, immediately discard that card.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In my opinion, no card changes the meta game for a single battle more than
&lt;strong&gt;Containment&lt;/strong&gt;. Once players can no longer deploy cards face-down, many of
their options are removed.&lt;/p&gt;

&lt;p&gt;Setting up cards to flip in a non-matching theater is no longer possible. Even
just using the card as a 2 for some extra strength won’t work, either.&lt;/p&gt;

&lt;p&gt;Players are forced to either deal with &lt;strong&gt;Containment&lt;/strong&gt; by flipping it, or commit
to playing cards face-up to their matching theater. Both will stretch resources
thin, though &lt;strong&gt;Containment&lt;/strong&gt; doesn’t come without drawbacks.&lt;/p&gt;

&lt;p&gt;Despite its power, &lt;strong&gt;Containment&lt;/strong&gt; will also work against the person who played
it.  I’ve definitely bitten myself in the butt using &lt;strong&gt;Containment&lt;/strong&gt;, especially
as plans change once more cards are played. In some cases, you’ll need to flip
your own &lt;strong&gt;Containment&lt;/strong&gt;, which never feels great either!&lt;/p&gt;

&lt;h3 id=&quot;cover-fire&quot;&gt;Cover Fire&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Strength:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Effect:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;All cards covered by this card are now Strength 4.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This card is a punny and powerful late-game card that can swing the Land theater
(or another, if you’re able to use something like &lt;em&gt;Air 2&lt;/em&gt;, &lt;strong&gt;Air Drop&lt;/strong&gt;) back
in your favor. It’s especially powerful after you’ve used utility cards like
&lt;strong&gt;Reinforce&lt;/strong&gt; &lt;em&gt;(Land 1)&lt;/em&gt; or &lt;strong&gt;Ambush&lt;/strong&gt; &lt;em&gt;(Land 2)&lt;/em&gt; and now want some big numbers
to secure the theater.&lt;/p&gt;

&lt;p&gt;While it’s susceptible to being flipped and losing big points, it’s typically
larger than &lt;strong&gt;Heavy Tanks&lt;/strong&gt; &lt;em&gt;(Land 6)&lt;/em&gt; as long as it covers one card. This means
you can often leverage multiple threats to secure victory in Land by, for
example, letting your &lt;strong&gt;Heavy Tanks&lt;/strong&gt; get flipped before plopping a &lt;strong&gt;Cover
Fire&lt;/strong&gt; on top of it for an even larger swing in your favor!&lt;/p&gt;

&lt;h3 id=&quot;escalation&quot;&gt;Escalation&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Strength:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Effect:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;All of your face-down battle cards are now Strength 4.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There are two primary ways that &lt;strong&gt;Escalation&lt;/strong&gt; can be used to swing a game.&lt;/p&gt;

&lt;p&gt;With a bad hand, an early deploy can signal a threat to start dropping all of
your future cards face-down, since they’ll be worth more than your opponent can
likely push back against. And worse, if they try to flip your cards to deminish
their Strength, you get the active effects as a bonus!&lt;/p&gt;

&lt;p&gt;But it can also be used as a finisher. If you have multiple cards already
face-down, playing &lt;strong&gt;Escalation&lt;/strong&gt; as your final card can be a devastating swing
across multiple theaters, netting a victory!&lt;/p&gt;

&lt;p&gt;The biggest concern for users of &lt;strong&gt;Escalation&lt;/strong&gt; will be &lt;strong&gt;Containment&lt;/strong&gt; &lt;em&gt;(Air
5)&lt;/em&gt;, which can shut out future face-down cards. But while &lt;strong&gt;Escalation&lt;/strong&gt; is
otherwise powerful, players shouldn’t rely on it alone to win a battle.&lt;/p&gt;

&lt;figure class=&quot;align-right third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/air-land-and-sea-maneuver.png&quot; alt=&quot;Air, Land, &amp;amp; Sea: Maneuver Card Art&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/air-land-and-sea-reinforce.jpg&quot; alt=&quot;Air, Land, &amp;amp; Sea: Reinforce Card Art&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;maneuver&quot;&gt;Maneuver&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Strength:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Effect:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Flip a battle card in an adjacent theater.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The prevalence of &lt;strong&gt;Maneuver&lt;/strong&gt; in each theater illustrates the importance of
flipping cards on the game’s design. Some other cards explore the space, too,
but none as simply as &lt;strong&gt;Maneuver&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Its flexibility is a key part of its strength, as users can use &lt;strong&gt;Maneuver&lt;/strong&gt;
offensively to flip over cards in non-matching theaters after being deployed
face-down or defensively to flip their opponent’s cards or perhaps re-flip cards
their opponents may have flipped, too.&lt;/p&gt;

&lt;p&gt;The final component of the design, which requires that the flipped card is in an
adjacent theater, makes for interesting decisions or plans with more steps. For
example, a player might put a &lt;strong&gt;Manuever&lt;/strong&gt; face-down in a non-matching theater
so that they can flip it later or perhaps flip a card they otherwise wouldn’t
have been able to reach.&lt;/p&gt;

&lt;p&gt;To me, &lt;strong&gt;Maneuver&lt;/strong&gt; illustrates the deep strategy of the game despite the
simplicity of each card. Each card is able to interact with one another to form
a complex decision tree which keeps the game exciting, even after many
playthroughs.&lt;/p&gt;

&lt;h3 id=&quot;reinforce&quot;&gt;Reinforce&lt;/h3&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Strength:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Effect:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Look at the top card of the battle deck. You may play it to an adjacent theater.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This card is a great first turn play, since it enables players to establish
Strength in multiple theaters. It also encourages new players to understand and
interact with the flipping mechanic of the game. If the drawn card is powerful,
you can turn the tide by flipping it over!&lt;/p&gt;

&lt;p&gt;I can imagine playing this card in later stages of the game, but the information
gained from the drawn card as well as the ability to flip it, if possible, feels
preferrable to playing earlier in the battle.&lt;/p&gt;

&lt;h2 id=&quot;the-expansion-spies-lies--supplies&quot;&gt;The Expansion: Spies, Lies, &amp;amp; Supplies&lt;/h2&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/air-land-and-sea-expansion.png&quot; alt=&quot;The cards, tableaus, and tokens from Air, Land, &amp;amp; Sea: Spies, Lies, &amp;amp; Supplies.&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Recently, an expansion to the game titled, &lt;em&gt;Spies, Lies, &amp;amp; Supplies&lt;/em&gt; was
released, also designed by Jon Perry. The expansion includes 18 new cards evenly
distributed across 3 new theaters.&lt;/p&gt;

&lt;p&gt;The game can be played independently using the three new theaters as a
standalone game, or, since they use the same concepts, shuffled to play with
three randomly selected theaters from either game.&lt;/p&gt;

&lt;p&gt;This expansion has slightly weaker themes, since the theaters are more
conceptual (Intelligence, Diplomacy, and Economics) though since it’s an
expansion, the designer has added some complexity which helps round out the
game, while also building on the theme of each theater.&lt;/p&gt;

&lt;p&gt;For example, the Intelligence theater relies on revealing cards in your
opponent’s hand. The Diplomacy cards have powers that benefit both players. And
the Economics cards add Supply Tokens which grant permanent strength to
theaters.&lt;/p&gt;

&lt;p&gt;While I wouldn’t recommend &lt;em&gt;Spies, Lies, &amp;amp; Supplies&lt;/em&gt; as a standalone game, it
pairs well with the original for added longevity on the table, even introducing
some new modes.&lt;/p&gt;

&lt;h3 id=&quot;epic-mode&quot;&gt;Epic Mode&lt;/h3&gt;
&lt;p&gt;The added Epic Mode uses five of the six theaters, chosen randomly, with players
being dealt ten cards per battle instead of six. Like the standard mode, the
goal is still to win the majority of theaters, in this case, three of the five.&lt;/p&gt;

&lt;p&gt;The points table for Withdrawl has changed slightly, but the end goal of 12
Points is the same. Typically, the number of battles is comparable to a Standard
game, but each battle takes much longer.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Points&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1st Player&lt;br /&gt;&lt;em&gt;(cards)&lt;/em&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2nd Player&lt;br /&gt;&lt;em&gt;(cards)&lt;/em&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3-5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4-6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1-2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2-3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0-1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When I played, we rotated one theater out each round, to keep things balanced
and semi-predictable. But otherwise, the game has much added chaos, as
convoluted combos are now possible with ten cards in hand. Though this, without
a doubt, makes each battle feel much more “epic”!&lt;/p&gt;

&lt;p&gt;In addition, the balance of certain cards changes drastically in Epic Mode.
Cards that enable players to deploy to any theater, like &lt;strong&gt;Aerodrome&lt;/strong&gt; &lt;em&gt;(Air 4)&lt;/em&gt;
or the newly-introduced &lt;strong&gt;Supply Lines&lt;/strong&gt; &lt;em&gt;(Economics 2)&lt;/em&gt; become exceptionally
more powerful, since there are now two more theaters to be able to flex to.&lt;/p&gt;

&lt;p&gt;The biggest downside of Epic Mode in my experience was the increase in time.
With a much larger decision tree, players may spend a lot more time
contemplating their moves. A turn timer worked well for this, and even added
some good flavor, since inaction in a war is not a viable strategy!&lt;/p&gt;

&lt;h3 id=&quot;3-4-player-mode&quot;&gt;3-4 Player Mode&lt;/h3&gt;
&lt;p&gt;Epic Mode also adds support for playing with three or four. Players team up,
with up to two members on each side. The hand is split so that each player gets
five of the ten cards. Turns between players on the same team don’t necessarily
alternate, but whichever teammate has more cards &lt;em&gt;must&lt;/em&gt; play (or, if you and
your partner are tied, it’s up to you to decide).&lt;/p&gt;

&lt;p&gt;At the beginning, players may exchange one card from their hand, but all other
communication about player hands must be public, so the enemy can try and listen
in to strategize. When playing, we found it valuable to talk in code using the
passed card as a “known secret”.&lt;/p&gt;

&lt;p&gt;For example, you might say, “The card I passed you is my lowest Strength card,”
or “I don’t have any other cards matching the Theater of that card.” It’s fun to
keep your plans hidden as much as possible from your opponent, and it also adds
another thematic element to the game, a sort of cryptography-adjacent side to
each battle.&lt;/p&gt;

&lt;p&gt;Due to talking in code or strategizing your next move, playing with three or
four increases the game’s play time further, but I felt it was a more worthy
consideration. It’s much more fun to plan your move with a partner where you
each only have half of the information about your resources, and there’s often
less to consider than when playing with all ten cards on your own.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I’ve been very impressed by &lt;em&gt;Air, Land, &amp;amp; Sea&lt;/em&gt;. It was easy to pick up, but
there’s deep thought that goes into each battle, which keeps the game fresh. The
expansion adds additional longevity and let’s you expand to play with three or
four players, which is uncommon for most two-player games.&lt;/p&gt;

&lt;p&gt;Furthermore, the small size makes it an easy game to take wherever you go, with
the expansion nesting easily into the original game box. &lt;em&gt;*Chef’s Kiss*&lt;/em&gt; If my
friend didn’t already own a copy, I would go out and buy a copy for myself.&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Board Games" /><category term="strategy" /><category term="bluffing" /><category term="war" /><summary type="html">Learn how the game can pack so much into just 18 cards. And how the expansion builds on the formula with only double the deck size.</summary></entry><entry><title type="html">Exploring Quest Design in *Hearthstone Battlegrounds* Season 2</title><link href="https://carsonboden.com/video%20games/2022/09/13/hearthstone-battlegrounds-s2.html" rel="alternate" type="text/html" title="Exploring Quest Design in *Hearthstone Battlegrounds* Season 2" /><published>2022-09-13T00:00:00-07:00</published><updated>2022-09-13T00:00:00-07:00</updated><id>https://carsonboden.com/video%20games/2022/09/13/hearthstone-battlegrounds-s2</id><content type="html" xml:base="https://carsonboden.com/video%20games/2022/09/13/hearthstone-battlegrounds-s2.html">&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-board.webp&quot; alt=&quot;An example playfield of Hearthstone's Battlegrounds mode.&quot; /&gt;
&lt;/figure&gt;

&lt;table class=&quot;notice--info&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Release Date:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;30 Aug 2022&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Developer:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Blizzard Entertainment&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Publisher:&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Activision Blizzard&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;success-and-growth-of-battlegrounds&quot;&gt;Success and Growth of &lt;em&gt;Battlegrounds&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;After almost 3 years in the running (including Beta access), &lt;em&gt;Hearthstone
Battlegrounds&lt;/em&gt; has become one of the game’s cornerstone modes, largely in part
to it’s ease of entry.&lt;/p&gt;

&lt;p&gt;Unlike the game’s &lt;em&gt;Standard&lt;/em&gt; mode, &lt;em&gt;Battlegrounds&lt;/em&gt; doesn’t require players to
build a deck, but instead form their Warband of minions to fight other players
during the game itself. As a result, there’s not the same disparity between
casual and long-term players when it comes to a sizeable collection of cards for
building high-quality decks like there is in &lt;em&gt;Standard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This makes it easy to invite a friend to jump into a game without needing to
unlock cards for a given class or buy packs for the cards they’re missing in
their collection. Better yet, players who haven’t played in a while won’t need
to craft all their old cards into new ones, but can jump right into the same
playing field as everyone else!&lt;/p&gt;

&lt;h3 id=&quot;brief-summary-of-gameplay&quot;&gt;Brief Summary of Gameplay&lt;/h3&gt;
&lt;p&gt;In &lt;em&gt;Battlegrounds&lt;/em&gt;, players compete against 7 others to be the last one
standing. Each round consists of two phases.&lt;/p&gt;

&lt;p&gt;During the Recruit Phase, players buy minions from Bob’s Tavern to add to their
Warband. Minions cost 3 Gold, though can later be sold back to Bob for 1 Gold.
Players start their first turn with 3 Gold, which increases by 1 Gold each turn
until reaching a max of 10 Gold.&lt;/p&gt;

&lt;p&gt;In the Combat Phase, players are pitted 1v1 against a different, random opponent
in the game. Minions from each player take turns randomly attacking enemies
until one side has none remaining, at which point the winner attacks the loser.&lt;/p&gt;

&lt;p&gt;Players must balance purchasing enough minions to avoid losing in Comabt and
depleting their health with upgrading Bob’s Tavern to improve the quantity and
quality of offered minions. Rounds continue, with players fighting different
opponents until only the victor remains.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-victory.webp&quot; alt=&quot;The Battlegrounds victory screen&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;previous-expansions&quot;&gt;Previous Expansions&lt;/h3&gt;
&lt;p&gt;Since the initial release in late 2019, Blizzard has added a variety of factions
to &lt;em&gt;Battlegrounds&lt;/em&gt;. The new factions enabled the set of cards in the game
(previously a fixed list of the 5 available factions) to vary, changing the meta
each game.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;For example, high-health minions become more powerful if Murlocs are not
present, since Murlocs can consistently get the &lt;strong&gt;Poison&lt;/strong&gt; buff, which destroys
minions when they take any damage.&lt;/p&gt;

&lt;p&gt;The new factions also brought in fresh ideas to the format, since the game’s
cards were first based off of existing cards from &lt;em&gt;Standard Hearthstone&lt;/em&gt;. The
Quilboar faction, for example, added small buff spells called Bloodgems which
give permanent stats. The Naga, on the other hand, provide Spellcrafts, which
are more powerful, yet only buff a minion for one turn.&lt;/p&gt;

&lt;p&gt;The development team also explored more powerful buffs with their Darkmoon Faire
expansion. During this special format &lt;em&gt;(no longer available)&lt;/em&gt;, players would
choose one of three powerful spells every four turns, adding it to their hand.
This format was the standard for &lt;em&gt;Battlegrounds&lt;/em&gt; for a while and was later
sprinkled into about 25% of matches for &lt;em&gt;Battlegrounds&lt;/em&gt; Season 1.&lt;/p&gt;

&lt;figure class=&quot;align-center third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-might-of-stormwind.webp&quot; alt=&quot;Darkmoon Prize: Might of Stormwind&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-gruul-rules.webp&quot; alt=&quot;Darkmoon Prize: Gruul Rules&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-give-a-dog-a-bone.webp&quot; alt=&quot;Darkmoon Prize: Give a Dog a Bone&quot; /&gt;
  &lt;figcaption&gt;
    Some examples of Darkmoon Prizes from the Darkmoon Faire expansion.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;overview-of-quests&quot;&gt;Overview of Quests&lt;/h3&gt;
&lt;p&gt;For those who haven’t played the newest update to &lt;em&gt;Battlegrounds&lt;/em&gt;, here’s a
quick explanation of how Quests work:&lt;/p&gt;

&lt;p&gt;On your fourth turn, players are asked to choose from one of three quests. Each
quest has a goal, like “Lose or tie 3 combats” or “Spend 25 gold” which, once
completed, gives the player a reward, such as “You only need 2 copies of a
minion to make it Golden” or “After you Discover a card, get an extra copy of
it”.&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-quest-choices.jpg&quot; alt=&quot;The example of the Quest selection options in Battlegrounds.&quot; /&gt;
  &lt;figcaption&gt;
    On Turn 4, players must choose a Quest to help them scale later in the game.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The goals scale slightly based on the relative power of rewards. So, for
example, “Summon X minions” might be 20 for a lower-impact reward but 30 for a
higher-impact one. This can incentivize players to choose “worse” rewards if it
means they’ll get it earlier and can power through the midgame, which often
times can net a low-placing win.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;Remember that getting 4th place or better is typically considered a “Win” (and
gives a raise in MMR) since there are eight players in each game, so 4th place
is in the top 50%.&lt;/p&gt;

&lt;p&gt;While Quests have no doubt shaken up the meta, I think it’s important to
consider if the quests are expanding the game by changing the way players build
their Warbands or if they are instead amplifying existing strategies.&lt;/p&gt;

&lt;p&gt;The answer is both! But let’s explore some of the different Quests to see why
that’s the case.&lt;/p&gt;

&lt;h2 id=&quot;expanding-player-interaction&quot;&gt;Expanding Player Interaction&lt;/h2&gt;
&lt;p&gt;These Quests change how players interact with the game. Players will need to
adapt their strategy to handle new bonuses (and obstacles) that each Quest
provides.&lt;/p&gt;

&lt;figure class=&quot;align-center third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-alter-ego.png&quot; alt=&quot;Battlegrounds Reward: Alter Ego&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-devils-in-the-details.png&quot; alt=&quot;Battlegrounds Reward: Devils in the Details&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-teal-tiger-sapphire.png&quot; alt=&quot;Battlegrounds Reward: Teal Tiger Sapphire&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;alter-ego&quot;&gt;Alter Ego&lt;/h3&gt;
&lt;p&gt;I like Alter Ego because of the interaction with Freeze. If you Freeze a
buffed minion, it’ll lose the buff next turn, due to the swapping mechanic. But
similarly, freezing an un-buffed minion will cause it to be buffed the following
turn.&lt;/p&gt;

&lt;p&gt;In this way, players may reconsider which minions they’re Freezing. Perhaps a
player wants to buy a buffed minion to empower their board and wait for a
triple, but if they’ll have to Freeze it for next turn, when it won’t have the
buff, it’s not worth it.&lt;/p&gt;

&lt;h3 id=&quot;devils-in-the-details&quot;&gt;Devils in the Details&lt;/h3&gt;
&lt;p&gt;Initially, this reward feels like a straight buff that you can stack onto the
right and left minions. It’s possibly good for hard-to-buff cleave minions or
long-term buff minions that can’t buff themselves.&lt;/p&gt;

&lt;p&gt;However, once players begin Freezing important minions they want to buy next
turn, they’ll realize the devil really &lt;em&gt;is&lt;/em&gt; in the details: Those Frozen minions
each have a chance of being consumed!&lt;/p&gt;

&lt;p&gt;Similar to &lt;strong&gt;Alter Ego&lt;/strong&gt;, players will rethink how they’ll be Freezing minions.
Is the Freeze worth it if the minion could be consumed? Is it better to re-roll
until there’s a good set of stats in the Tavern to absorb instead? The Quest
changes how player’s deal with the Tavern if they want to maximize their chance
for a win.&lt;/p&gt;

&lt;h3 id=&quot;teal-tiger-sapphire&quot;&gt;Teal Tiger Sapphire&lt;/h3&gt;
&lt;p&gt;Many players can erroneously get caught in the cycle of spending all of their
money each turn Refreshing for a specific minion. But with this Quest, players
are incentivized to!&lt;/p&gt;

&lt;p&gt;In Season 1 and earlier of &lt;em&gt;Battlegrounds&lt;/em&gt;, committing to rolling for an entire
turn was a bad move, unless you had multiple pairs you were hoping to triple.
But now, players can commit to that strategy with a bigger payoff. That perfect
minion might not always be found, but this can give players an extra edge
towards piecing together a sweet combo.&lt;/p&gt;

&lt;h2 id=&quot;intensifying-existing-strategies&quot;&gt;Intensifying Existing Strategies&lt;/h2&gt;
&lt;p&gt;Some of the other Quests in the set are powerful, though they serve more to
empower existing strategies and combos rather than create new player
experiences.&lt;/p&gt;

&lt;p&gt;This isn’t a bad thing; too many complicated Quests can lower the barrier to
entry that made Battlegrounds so successful. But I think its important for
designers to consider what future Quests will bring to the game, since expanding
the experience is what keeps the game fresh.&lt;/p&gt;

&lt;figure class=&quot;align-center third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-staff-of-origination.png&quot; alt=&quot;Battlegrounds Reward: Staff of Origination&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-friends-along-the-way.png&quot; alt=&quot;Battlegrounds Reward: The Friends Along the Way&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-theotars-parasol.png&quot; alt=&quot;Battlegrounds Reward: Theotar's Parasol&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;staff-of-origination&quot;&gt;Staff of Origination&lt;/h3&gt;
&lt;p&gt;This was the most egregiously powerful-yet-boring card in the new expansion. In
fact, it was so powerful it got nerfed from giving minions +15/+15 to +12/+12.&lt;/p&gt;

&lt;p&gt;At face value, there’s rarely a reason &lt;em&gt;not&lt;/em&gt; to choose this card: it gives the
most amount of stats out of any quest. While, in theory, it falls off compared
to other Quests once everyone’s minions have been buffed enough, the constant
+12/+12 is enough to get most any build through the midgame, which normally
means ending up in the top 50%, with a win.&lt;/p&gt;

&lt;p&gt;While “Vanilla” cards like this are important for introducing players to the
power of Quests, I find &lt;strong&gt;Staff of Origination&lt;/strong&gt; to be extremely
one-dimensional. Players aren’t doing much different once this Reward is active.&lt;/p&gt;

&lt;h3 id=&quot;the-friends-along-the-way&quot;&gt;The Friends Along the Way&lt;/h3&gt;
&lt;p&gt;Getting locked into a specific faction is a blessing and a curse with this
Quest. Most players will likely already be building towards the corresponding
faction in the Reward, but that could change based on the Quest Goal.&lt;/p&gt;

&lt;p&gt;Regardless, though, the Quest offers more of the same, existing &lt;em&gt;Battlegrounds&lt;/em&gt;
experience. The only change in playstyle is the comfort of getting two
guaranteed cards from a faction each turn (though if you’re &lt;em&gt;not&lt;/em&gt; playing to
that faction, you could treat it as two coins, instead).&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, this Quest is still fun to play! And, unlike the first
iteration of &lt;strong&gt;Staff of Origination&lt;/strong&gt;, it isn’t unbalanced, since players might
not get the specific faction cards they need for their build. But the only
change in playstyle is forcing players to complete their Quest Goal to get this
reward.&lt;/p&gt;

&lt;h3 id=&quot;theotars-parasol&quot;&gt;Theotar’s Parasol&lt;/h3&gt;
&lt;p&gt;Another extremely fun idea that mainly serves to empower a few existing cards
like &lt;strong&gt;Baron Rivendare&lt;/strong&gt;, &lt;strong&gt;Soul Juggler&lt;/strong&gt;, or any card that doesn’t ever want
to be attacked.&lt;/p&gt;

&lt;figure class=&quot;align-center third&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-baron-rivendare.png&quot; alt=&quot;Battlegrounds Minion: Baron Rivendare&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-soul-juggler.png&quot; alt=&quot;Battlegrounds Minion: Soul Juggler&quot; /&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/hearthstone-bg-dread-admiral-eliza.png&quot; alt=&quot;Battlegrounds Minion: Dread Admiral Eliza&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;In particular, I’ve found this Quest to amplify the Beasts + &lt;strong&gt;Baron Rivendare&lt;/strong&gt;
build to powerful levels. Though it’s nice that a buffed &lt;strong&gt;Zapp Slywick&lt;/strong&gt; can
still cut through the buff.&lt;/p&gt;

&lt;p&gt;While the Quest Reward improves the viability of some builds, it doesn’t force
the player to change how they’re building the Warband. The Quest itself is fun
to use, but it doesn’t expand the &lt;em&gt;Battlegrounds&lt;/em&gt; experience but rather
highlights existing strengths.&lt;/p&gt;

&lt;h2 id=&quot;touching-on-quest-goals&quot;&gt;Touching on Quest Goals&lt;/h2&gt;
&lt;p&gt;Since the Quest Goals themselves don’t make players more powerful, they aren’t
as interesting of a topic to explore on a card-by-card basis.&lt;/p&gt;

&lt;p&gt;As a whole, though, I appreciate that the Goals are balanced around the Rewards
to encourage players to think about how difficult it will be to complete a Goal,
even if the reward is extremely juicy.&lt;/p&gt;

&lt;p&gt;The Goals serve to hinder the player in some ways: Often if you take too long to
complete a Quest, you’ll quickly fall behind, no matter how good the Reward is.
(This happened to me in several games.) In this way, the new Quest mechanic
requires players to commit to their choice, since winning &lt;em&gt;without&lt;/em&gt;
incorporating your Quest is extremely difficult.&lt;/p&gt;

&lt;h2 id=&quot;the-future-of-quests&quot;&gt;The Future of Quests&lt;/h2&gt;
&lt;p&gt;I imagine that the current state of Quests is only the beginning. The developers
likely have more ideas on Goals and Rewards that will continue to diversify the
relatively small pool of options, but are seeing how the first wave of Quests
play out.&lt;/p&gt;

&lt;p&gt;Some ways that Quests could change mechanically include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Granting a new / additional Hero Power&lt;/li&gt;
  &lt;li&gt;Awarding special, unique minions&lt;/li&gt;
  &lt;li&gt;Debuffing opponents at the start of Combat&lt;/li&gt;
  &lt;li&gt;Repeatable Goals / Rewards (There’s currently one Quest that does this
already!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Rewards, to keep the system consistent, there will likely be new additions
that won’t stray far from the script. The Goals need to be completable by all
heroes (though that could change) which means they can’t rely too much on a
specific build.&lt;/p&gt;

&lt;p&gt;As the Season progresses, I’ll be excited to see if new ideas are introduced or
if they’ll unveil new Quests in a future Season. In any case, the meta still
feels fluid thanks to Quests. I’d love to test out the few remaining Quests I
haven’t seen as well as experiment more with Quests I’ve already tried. Who
knows what will come out on top? (Though &lt;strong&gt;Poison&lt;/strong&gt; still feels very dominant.)&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Video Games" /><category term="strategy" /><category term="collectible-card-game" /><category term="ranked" /><summary type="html">The newly-added quests have added some spice to Battlegrounds. I walk through which parts of the design worked to enhance the game vs. added more of the same.</summary></entry><entry><title type="html">An Attempt to Analyze Three Years of Board Game Stats</title><link href="https://carsonboden.com/board%20games/programming/2022/08/01/bg-stats.html" rel="alternate" type="text/html" title="An Attempt to Analyze Three Years of Board Game Stats" /><published>2022-08-01T00:00:00-07:00</published><updated>2022-09-08T01:05:15-07:00</updated><id>https://carsonboden.com/board%20games/programming/2022/08/01/bg-stats</id><content type="html" xml:base="https://carsonboden.com/board%20games/programming/2022/08/01/bg-stats.html">&lt;p class=&quot;btn btn--light-outline&quot;&gt;&lt;a href=&quot;https://github.com/cwboden/.dotfiles/tree/main/bg_stats&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;align-center&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/bg-shelf.jpg&quot; alt=&quot;A collection of board games on a shelf&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;the-spark&quot;&gt;The Spark&lt;/h2&gt;

&lt;p&gt;Three years ago, during a summer in Chicago, I decided that, with all of the
board games I’d been playing, it would be fun to track them and see trends,
average scores, and time spent playing games. While it’s fun to nerd out about
personal statistics, it could also be useful to see which games were actually
getting played or if asymmetry between playable characters or factions was
balanced.&lt;/p&gt;

&lt;p&gt;I found an app called &lt;a href=&quot;https://www.bgstatsapp.com/&quot;&gt;BGStats&lt;/a&gt; and have watched
the app grow with my number of plays. It now encompasses board game expansions,
deeper statistics, synchronization with Board Game Geek, and it’s own cloud
backup, if you’re willing to pay a subscription.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;This is not a paid sponsorship. I am not affiliated with &lt;em&gt;BGStats&lt;/em&gt; or &lt;em&gt;Apps by
Eerko&lt;/em&gt;. Though I do recommend the app!&lt;/p&gt;

&lt;p&gt;Since then, I have recorded a &lt;em&gt;lot&lt;/em&gt; of games:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Plays&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Players&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Games&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Time&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;H-Index&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1380&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;180&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;154&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;~1014h&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19x19&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The pandemic was a great time for board games, so it was fun to hit my 1000th
play during the quarantine. Now, at another milestone of three years of recorded
plays, I wanted to see if I could glean anything more using so much aggregated
data.&lt;/p&gt;

&lt;h2 id=&quot;python-wrapper&quot;&gt;Python Wrapper&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;BGStats&lt;/em&gt; enables users to export their data to a JSON file, though the file is
fairly reminiscing of a database. The file is broken into a few “tables” (arrays
in JSON) of Players, Games, Plays, and Locations.&lt;/p&gt;

&lt;p&gt;Plays links together many of these values using IDs. For example, a Play might
include a list of 3 Player IDs, an ID for the Game, and an ID for the Location.
Each ID can then be looked up in the corresponding table, very similar to a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Foreign_key&quot;&gt;Foreign Key&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;As a result, I wanted to create a wrapper that could move data from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BGStatsExport.json&lt;/code&gt; into a database. And tada, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bg_stats&lt;/code&gt; library was born!
&lt;em&gt;(See &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bg_stats/&lt;/code&gt; for more details.)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;strong-typing-in-dataclasses&quot;&gt;Strong Typing in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dataclass&lt;/code&gt;es&lt;/h3&gt;
&lt;p&gt;As a fervent believer in typing, I wanted the Python wrapper to reflect the
types of their JSON companions. This would also make serialization and, more
importantly, deserialization simpler by providing a 1:1 mapping to a Python
class.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BgStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;players&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BgStats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BgStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dacite&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_dict()&lt;/code&gt; method made short work of the JSON to Python
conversions, which made it easy to work with native Python objects. The next
step was getting that object formatted into a database.&lt;/p&gt;

&lt;h3 id=&quot;ingesting-data-to-mysql&quot;&gt;Ingesting Data to MySQL&lt;/h3&gt;
&lt;p&gt;First, I had to initialize the table so that each Game, Play, etc. could be
inserted with the corresponding fields. I used a base class, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SqlTableEntry&lt;/code&gt; to
define a few key member variables and function that would convert each object
into valid SQL:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlTableEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TABLE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SQL_SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;into_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The corresponding classes would then define their “shape” in the database:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlTableEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bggUsername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isAnonymous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modificationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TABLE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;players&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SQL_SCHEMA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dedent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        bgg_username VARCHAR(64),
        id INT PRIMARY KEY,
        is_anonymous BOOL,
        modification_date DATETIME,
        name VARCHAR(128),
        uuid VARCHAR(64)
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, my objects knew how they looked in SQL, so it was straightforward
to create a query that would insert each of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bg_stats.api&lt;/code&gt; objects into a
table, locally:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cook_insert_entry_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlTableEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dedent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
            INSERT INTO &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE_NAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
            (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQL_SCHEMA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)
            VALUES &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
        &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, by running the script, I could populate the database with my exported board
game data!&lt;/p&gt;

&lt;p&gt;In theory, this design could be adapted to ingest a variety of data by defining
a programmatic way to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;into_schema()&lt;/code&gt; for each class as well as the
corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SQL_SCHEMA&lt;/code&gt; property. This is left as an exercise to the reader
or maybe I’ll get to it one day.&lt;/p&gt;

&lt;h2 id=&quot;grafana-dashboard&quot;&gt;Grafana Dashboard&lt;/h2&gt;
&lt;p&gt;I had recently been using Grafana for work, so I decided to take the plunge and
also do some query practice using it to visualize some stats!&lt;/p&gt;

&lt;figure class=&quot;align-right&quot;&gt;
  &lt;img src=&quot;https://carsonboden.com/assets/img/bg-stats-top-games-by-play.png&quot; alt=&quot;Grafana Dashboard: Top Games by Play&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;I’m still learning SQL, but some experimenting led to some fun visualizations.
This dashboard shows a simple query to show the top 10 games sorted by play:&lt;/p&gt;

&lt;p&gt;Below is the query used. We count the number of plays associated with each game
and then sort by the number of plays.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_plays&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plays&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game_ref_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_plays&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By now, I felt I had gotten some decent practice piecing together a dashboard
using a database. The deeper queries I was hoping to explore had been cast into
the backlog of making a Python wrapper and Grafana dashboard that a month had
passed with no results about the board games themselves. So what &lt;em&gt;had&lt;/em&gt; I
learned?&lt;/p&gt;

&lt;h2 id=&quot;learnings--takeaways&quot;&gt;Learnings + Takeaways&lt;/h2&gt;
&lt;p&gt;For starters, I learned that there’s probably not much more information to draw
from board games and their scores. It’s a fun mechanism to track plays in the
same way that I like tracking runs or bike rides on a fitness watch. But I
couldn’t think of many in-depth queries that would answer any burning questions.&lt;/p&gt;

&lt;p&gt;For visualization, I tried plotting things using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;, a powerful Python
library for graphing, but I wanted practice with Grafana for professional
reasons. I would still recommend exploring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt; for your usecase, though
I did find it easier to tinker with Grafana’s queries through a UI that would
update live, though perhaps there’s a way to do that with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;From a technical perspective, I learned to appreciate the quicker, dirtier
solution to accomplish a task. I think long-term longevity is extremely
important, but don’t let perfect be the enemy of done. Some solutions could have
been made more generic, but I didn’t &lt;em&gt;need&lt;/em&gt; them to be yet.&lt;/p&gt;

&lt;p&gt;While I didn’t learn more about my playing habits, I &lt;em&gt;did&lt;/em&gt; learn more
about SQL and Grafana. For reference, &lt;a href=&quot;https://github.com/cwboden/.dotfiles/tree/main/bg_stats&quot;&gt;check out the source code,
here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Carson Boden</name></author><category term="Board Games" /><category term="Programming" /><category term="statistics" /><category term="tools" /><category term="grafana" /><summary type="html">A learning experience about crunching data on board game plays tracked since August of 2019 and visualizing them in Grafana.</summary></entry></feed>