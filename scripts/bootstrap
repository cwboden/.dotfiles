#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
    printf "\r    \033[00;34m==>\033[0m $1\n"
}

user () {
    printf "\r    [ \033[0;33m??\033[0m ] $1\n"
}

success () {
    printf "\r\033[2K    [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K    [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

setup_gitconfig () {
    if ! [ -f git/gitconfig.local.symlink ]
    then
        info 'setup gitconfig'

        git_credential='cache'

        user ' - What is your github author name?'
        read -e git_authorname
        user ' - What is your github author email?'
        read -e git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

        success 'gitconfig'
    fi
}

link_file () {
    local src=$1 dst=$2

    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then

        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then

            local currentSrc="$(readlink $dst)"

            if [ "$currentSrc" == "$src" ]
            then

                skip=true;

            else

                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac

            fi

        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]
        then
            success "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]    # "false" or empty
    then
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi
}

install_dotfiles () {
    info 'Installing Dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

setup_vim () {
    info 'Setting Up Vim'

    mkdir -p ~/.vim/swapfiles
    mkdir -p ~/.vim/backups
    mkdir -p ~/.vim/undodir
    success 'created .vim/ directory'

    # Install Vim-Plug
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
        &>/dev/null

    vim +PlugInstall +qall
    success 'vim-plug installed'
}

setup_zsh() {
    info 'Setting Up Zsh'

    if [[ ! -d ~/.oh-my-zsh ]]; then
        zsh_installer=/tmp/zsh_install.sh
        wget -O $zsh_installer \
            https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh \
            &>/dev/null
        sh $zsh_installer --unattended --keep-zshrc &>/dev/null
    fi
    success 'oh-my-zsh installed'

    if [[ ! -d ~/.oh-my-zsh/custom/themes/powerlevel10k ]]; then
        git clone --depth=1 \
            https://github.com/romkatv/powerlevel10k.git \
            ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k \
            &>/dev/null
    fi
    success 'powerlevel10k installed'

    if [[ $SHELL != "/bin/zsh" ]]; then
        echo "Changing shell to Zsh. Password required."
        chsh -s $(which zsh)
    fi
    success 'shell set to zsh'
}

setup_gitconfig
setup_vim
setup_zsh
install_dotfiles

echo ''
echo '    All installed!'
